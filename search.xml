<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Idea减少鼠标操作的几个技巧</title>
      <link href="/2020/06/09/Idea%20Mouse%20Tip/"/>
      <url>/2020/06/09/Idea%20Mouse%20Tip/</url>
      
        <content type="html"><![CDATA[<h2 id="演出模式"><a href="#演出模式" class="headerlink" title="演出模式"></a>演出模式</h2><p><em>View</em> =&gt; <em>Appearance</em> =&gt; <em>Enter Presentation Mode</em> （旧版本为 <em>View</em> =&gt; <em>Enter Presentation Mode</em>）开启演出模式，演出模式让我们能够专注于代码的编辑窗口，隐藏不必要的界面细节。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605101514.png" alt="演出模式"></p><p>如果需要的话，可以在<em>Setting</em> =&gt; <em>Keymap</em> 为演出模式设置快捷键。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605101601.png" alt="设置快捷键"></p><p>如果需要呼出其他窗口可以通过<em>Alt</em> + 数字键。可以自行修改使用比较多的页面。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200609021334.gif" alt="窗口呼出"></p><p>对Idea足够熟悉的话，在演出模式下完全满足日常开发需求，并且拥有更好的视觉体验。</p><h2 id="新建类"><a href="#新建类" class="headerlink" title="新建类"></a>新建类</h2><p>由于新建类需要使用<em>File</em> =&gt; <em>new<em>或者使用快捷键</em>Alt</em> + <em>insert</em>，要么离双手覆盖范围太远，或者操作起来较为复杂。</p><p>使用<em>Ctrl</em>+<em>Shift</em>+<em>A</em>可以较近距离的完成这个操作。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200609020216.gif" alt="新建类"></p><p>如果需要创建指定目录下的文件则需要多一步搜索操作。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200609020918.gif" alt="指定目录创建"></p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><table><thead><tr><th>快捷键</th><th>用途</th></tr></thead><tbody><tr><td>Ctrl + N</td><td>搜索类</td></tr><tr><td>Ctrl + Shift + N</td><td>搜索文件(加上/可以搜索目录，末尾加斜杆只搜索<strong>目录及目录下文件</strong>或<strong>包</strong>)</td></tr><tr><td>Ctrl + Shift + Alt + N</td><td>搜索方法,变量,表名,css样式名等</td></tr><tr><td>Ctrl + E</td><td>查看最近打开文件(允许勾选仅显示变更文件)</td></tr><tr><td>Ctrl + F12</td><td>查找类的继承关系(可以看到类的所有可调用方法并查找来源,仅查询方法可以使用Alt+7 Structure窗口代替)</td></tr><tr><td>Ctrl + F/R</td><td>当前类查找/替换</td></tr><tr><td>Ctrl + Shift + F/R</td><td>全局查找/替换</td></tr><tr><td>Ctrl + Alt + B</td><td>查找类实现,变量声明等</td></tr></tbody></table><p>以上是较为常用的搜索快捷键，因此这里不做更多的说明。</p><p><em>Ctrl + Shift + A</em> 查找操作，这个快捷键可以搜索到几乎所有的Idea操作。如果有什么操作，<em>配置</em>（下文中介绍的配置都可以使用此快捷键搜索）不记得，都可以尝试在这里搜索。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200609015436.gif" alt="查找操作"></p><p><em>Ctrl + Shift + Alt + J</em> 和<em>Alt + J</em>功能类似，用于搜索并选中相同的词。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200609015640.gif" alt="选中词"></p><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><p>在编辑代码时可能会频繁的用到光标移动，下面一些配置或快捷键将会有效的帮助我们增强效率。</p><h3 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h3><p><em>Ctrl + Shift + enter</em>代码补全，这几乎是Idea中最好用的快捷键了，它可以补全大部分的括号，大括号，引号，冒号，分号等，帮助我们做一个漂亮的收尾。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200609014643.gif" alt="代码补全"></p><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><h4 id="Ctrl-J"><a href="#Ctrl-J" class="headerlink" title="Ctrl+J"></a><em>Ctrl+J</em></h4><p>活动模板不依托于某个代码块，除了使用快捷键触发外直接输入亦可以触发。</p><p>在<em>Setting -&gt; Editor -&gt; Live Templates</em>中可以自定义活动模板。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605101236.png" alt="自定义模板"></p><p>活动模板的自定义支持多任务光标，一个变量即是一个任务光标，可用$END$标记结束光标。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605101246.png" alt="配置图解"></p><p>在底部可以修改适用范围，勾选Java -&gt; statement就可以适用于<em>Ctrl+J</em>或空白输入。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606213520.png" alt="修改适用范围"></p><p>执行后效果如下：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606213032.gif" alt="活动模板演示"></p><h4 id="Ctrl-Alt-J"><a href="#Ctrl-Alt-J" class="headerlink" title="Ctrl+Alt+J"></a><em>Ctrl+Alt+J</em></h4><p>环绕模板，它与后缀模板更为相似，且定义更加灵活。</p><p>定义时使用$SELECTION$标记被环绕的代码块。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606214320.png" alt="环绕模板配置"></p><p>使用时若光标无选中代码块，则以当前行为环绕对象，否则以选中代码块为环绕对象。</p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606214736.gif" alt="环绕模板演示"></p><p>关于活动模板和环绕模板的详细变量表达式定义参照<a href>Idea Live Templates配置详解及演示</a></p><h3 id="跳出引号，括号"><a href="#跳出引号，括号" class="headerlink" title="跳出引号，括号"></a>跳出引号，括号</h3><h4 id="tab跳出"><a href="#tab跳出" class="headerlink" title="tab跳出"></a>tab跳出</h4><p>确保<em>Settings-&gt;Editor-&gt;General-&gt;Smart Keys</em>中<em>Jump outside closing bracket/quote with Tab when typing</em>为勾选状态。</p><p>此时在字符串，括号的编辑区末尾时按<em>Tab</em>键将跳出（注意只有首次在编辑区时有效，之后再次进入就无效了）。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200608230600.gif" alt="跳出引号括号"></p><h4 id="大括号导航"><a href="#大括号导航" class="headerlink" title="大括号导航"></a>大括号导航</h4><p><em>Ctrl+Shift+M</em>可以导航到当前代码块括号上下，<em>Ctrl+[或]</em>也有类似的效果，不同的是多次使用可以向更外层跳跃。如果使用<em>Ctrl+Shift+[]</em>则会选中经过的代码块。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200608233104.gif" alt="大括号导航"></p><p>配合代码补全的自动换行，将可以很轻易方便的在代码块之间穿梭。</p><h3 id="自动导入和清理包"><a href="#自动导入和清理包" class="headerlink" title="自动导入和清理包"></a>自动导入和清理包</h3><p>确保<em>Settings-&gt;Editor-&gt;General-&gt;Auto Import</em>中<em>Add unambiguous imports on the fly</em>和<em>Optimize imports on the fly (for current project)</em>处于选中状态。</p><p>编辑器将在需要时自动导入和清理依赖包。</p><p>勾选前：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200609012915.gif" alt="勾选前"></p><p>勾选后：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200609002051.gif" alt="勾选后"></p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea Live Templates配置详解及演示</title>
      <link href="/2020/06/07/Idea%20Live%20Templates/"/>
      <url>/2020/06/07/Idea%20Live%20Templates/</url>
      
        <content type="html"><![CDATA[<h2 id="模板定义"><a href="#模板定义" class="headerlink" title="模板定义"></a>模板定义</h2><h3 id="活动模板"><a href="#活动模板" class="headerlink" title="活动模板"></a>活动模板</h3><p>活动模板不依托于某个代码块，直接输入即可以触发，或者使用快捷键<em>Ctrl+J</em>主动触发。</p><p>在<em>Setting -&gt; Editor -&gt; Live Templates</em>中可以自定义活动模板。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605101236.png" alt="自定义模板"></p><p>活动模板的自定义支持多任务光标，一个变量即是一个任务光标，可用$END$标记结束光标。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605101246.png" alt="配置图解"></p><p>在底部可以修改适用范围，勾选Java -&gt; statement就可以适用于<em>Ctrl+J</em>或空白输入。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606213520.png" alt="修改适用范围"></p><p>执行后效果如下：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606213032.gif" alt="活动模板演示"></p><h3 id="环绕模板"><a href="#环绕模板" class="headerlink" title="环绕模板"></a>环绕模板</h3><p>环绕模板依托于某个代码块，使用快捷键<em>Ctrl+Alt+J</em>触发。</p><p>定义时使用$SELECTION$标记被环绕的代码块。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606214320.png" alt="环绕模板配置"></p><p>使用时若光标无选中代码块，则以当前行为环绕对象，否则以选中代码块为环绕对象。</p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606214736.gif" alt="环绕模板演示"></p><h2 id="模板变量表达式含义表"><a href="#模板变量表达式含义表" class="headerlink" title="模板变量表达式含义表"></a>模板变量表达式含义表</h2><p>以下是定义变量时支持的表达式基本含义（当匹配多个结果时结果将出现在待选列表中）：</p><table><thead><tr><th align="left">表达式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="left">annotated(&lt;annotation&gt;)</td><td align="center">返回具有指定注解的类，方法或字段名</td></tr><tr><td align="left">arrayVariable()</td><td align="center">返回当前范围内数组变量，最近的优先展示</td></tr><tr><td align="left">lineCommentStart()</td><td align="center">返回当前语言指示行注释开始的字符</td></tr><tr><td align="left">blockCommentStart()</td><td align="center">返回当前语言指示块注释开始的字符</td></tr><tr><td align="left">blockCommentEnd()</td><td align="center">返回当前语言指示块注释结束的字符</td></tr><tr><td align="left">commentStart()</td><td align="center">返回当前语言指示注释开始的字符，对有行注释的返回行注释开头</td></tr><tr><td align="left">commentEnd()</td><td align="center">返回当前语言指示注释结束的字符，对有行注释的返回空（行注释通常没有结束字符）</td></tr><tr><td align="left">camelCase(&lt;String&gt;)</td><td align="center">将字符串转换为驼峰形式</td></tr><tr><td align="left">snakeCase(&lt;String&gt;)</td><td align="center">将字符串转换为下划线分割形式</td></tr><tr><td align="left">spaceSeparated(&lt;String&gt;)</td><td align="center">将字符串转换为空格分开形式</td></tr><tr><td align="left">spacesToUnderscores(&lt;String&gt;)</td><td align="center">将字符串的空格替换为下划线</td></tr><tr><td align="left">capitalize(&lt;String&gt;)</td><td align="center">将字符串首字母设为大写</td></tr><tr><td align="left">capitalizeAndUnderscore(&lt;String&gt;)</td><td align="center">将字符串转换为大写并用下划线隔开</td></tr><tr><td align="left">decapitalize(&lt;String&gt;)</td><td align="center">将字符串首字母设为小写</td></tr><tr><td align="left">underscoresToCamelCase(&lt;String&gt;)</td><td align="center">将下划线形式字符串转换为驼峰形式</td></tr><tr><td align="left">underscoresToSpaces(&lt;String&gt;)</td><td align="center">将下划线形式字符串转换为空格隔开形式</td></tr><tr><td align="left">lowercaseAndDash(&lt;String&gt;)</td><td align="center">将字符串转为小写并使用中划线分割</td></tr><tr><td align="left">escapeString(&lt;String&gt;)</td><td align="center">将字符串中的特殊符号进行转义，便于在java字符串中使用</td></tr><tr><td align="left">substringBefore(&lt;String&gt;, &lt;Delimeter&gt;)</td><td align="center">截取字符串在&lt;Delimeter&gt;之前的部分</td></tr><tr><td align="left">firstWord(&lt;String&gt;)</td><td align="center">返回字符串中的首个单词</td></tr><tr><td align="left">castToLeftSideType()</td><td align="center">获取左侧变量的类型判断是否需要强转</td></tr><tr><td align="left">rightSideType()</td><td align="center">获取右侧表达式的变量类型</td></tr><tr><td align="left">className()</td><td align="center">返回当前所在类（在内部类则返回内部类）类名</td></tr><tr><td align="left">currentPackage()</td><td align="center">返回当前所在包名</td></tr><tr><td align="left">qualifiedClassName()</td><td align="center">返回当前所在类（在内部类则返回内部类）的全限定类名（包+类名）</td></tr><tr><td align="left">classNameComplete()</td><td align="center">触发类名相关的代码补全</td></tr><tr><td align="left">clipboard()</td><td align="center">返回系统剪贴板的内容</td></tr><tr><td align="left">complete()</td><td align="center">调用一次代码补全，相当于调用一次<em>Ctrl+Space</em></td></tr><tr><td align="left">completeSmart()</td><td align="center">调用一次智能代码补全，相当于调用一次<em>Ctrl+Alt+Space</em></td></tr><tr><td align="left">componentTypeOf(&lt;array&gt;)</td><td align="center">返回数组类型</td></tr><tr><td align="left">concat(&lt;String&gt;, …)</td><td align="center">拼接字符串</td></tr><tr><td align="left">date([format])</td><td align="center">指定格式化方式返回当前系统时间字符串（根据<em>SimpleDateFormat</em>格式）</td></tr><tr><td align="left">time([format])</td><td align="center">指定格式化方式返回当前系统时间字符串（无日期，根据<em>SimpleDateFormat</em>格式）</td></tr><tr><td align="left">descendantClassesEnum(&lt;String&gt;)</td><td align="center">返回指定类的子类</td></tr><tr><td align="left">lineNumber()</td><td align="center">返回当前行行号</td></tr><tr><td align="left">enum(&lt;String&gt;, …)</td><td align="center">返回建议的字符串列表</td></tr><tr><td align="left">expectedType()</td><td align="center">自动识别并返回期望的类型，一般用于赋值，方法参数，返回语句处。</td></tr><tr><td align="left">fileName()</td><td align="center">返回当前文件名（带拓展名）</td></tr><tr><td align="left">fileNameWithoutExtension()</td><td align="center">返回当前文件名（不带拓展名）</td></tr><tr><td align="left">filePath()</td><td align="center">返回当前文件路径（带拓展名）</td></tr><tr><td align="left">fileRelativePath()</td><td align="center">返回当前文件相对当前项目的路径（带拓展名）</td></tr><tr><td align="left">groovyScript(&lt;String&gt;, [arg, …])</td><td align="center">执行作为字符串形式传递的<em>groovy</em>脚本</td></tr><tr><td align="left">guessElementType(&lt;Collection&gt;)</td><td align="center">返回集合中元素的类型</td></tr><tr><td align="left">iterableComponentType(&lt;Iterable&gt;)</td><td align="center">返回可迭代对象的类型</td></tr><tr><td align="left">iterableVariable()</td><td align="center">返回当前范围内可迭代类型对象，最近的优先展示</td></tr><tr><td align="left">methodName()</td><td align="center">返回当前所在方法名</td></tr><tr><td align="left">methodParameters()</td><td align="center">返回当前所在方法的所有参数名</td></tr><tr><td align="left">methodReturnType()</td><td align="center">返回当前所在方法的返回类型</td></tr><tr><td align="left">regularExpression(&lt;String&gt;, &lt;Pattern&gt;, &lt;Replacement&gt;)</td><td align="center">查找字符串中满足&lt;Pattern&gt;的所有部分并替换为&lt;Replacement&gt;</td></tr><tr><td align="left">typeOfVariable(&lt;String&gt;)</td><td align="center">返回变量的类型</td></tr><tr><td align="left">variableOfType(&lt;String&gt;)</td><td align="center">返回当前范围内满足类型条件的变量，最近的优先展示</td></tr><tr><td align="left">suggestFirstVariableName(&lt;String&gt;)</td><td align="center">返回当前范围内满足类型条件的部分变量，最近的优先展示和<em>variableOfType</em>类似但不推荐true，false，this，和super</td></tr><tr><td align="left">subtypes(&lt;String&gt;)</td><td align="center">返回指定类型的子类型</td></tr><tr><td align="left">suggestIndexName()</td><td align="center">返回当前范围中未使用的第一个常用迭代下标变量名（i，j，k等）</td></tr><tr><td align="left">suggestVariableName()</td><td align="center">根据变量命名规则的代码风格设置返回建议的变量名</td></tr><tr><td align="left">suggestShortVariableName()</td><td align="center">建议的变量名精简版</td></tr><tr><td align="left">user()</td><td align="center">返回当前系统的用户名称</td></tr></tbody></table><h2 id="变量表达式定义和演示"><a href="#变量表达式定义和演示" class="headerlink" title="变量表达式定义和演示"></a>变量表达式定义和演示</h2><h3 id="annotated-lt-annotation-gt"><a href="#annotated-lt-annotation-gt" class="headerlink" title="annotated(&lt;annotation&gt;)"></a>annotated(&lt;annotation&gt;)</h3><p>定义时在括号内传入注解的全限定类名：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605101311.png" alt="annotated模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605101320.gif" alt="annotated模板演示"></p><h3 id="arrayVariable"><a href="#arrayVariable" class="headerlink" title="arrayVariable"></a>arrayVariable</h3><p>返回类字段，或方法变量中的数组类型变量名称。<strong>离得近的将被优先推荐</strong>。</p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605101331.gif" alt="arrayVariable模板配置"></p><h3 id="lineCommentStart-commentEnd"><a href="#lineCommentStart-commentEnd" class="headerlink" title="lineCommentStart~commentEnd"></a>lineCommentStart~commentEnd</h3><p><em>lineCommentStart</em>，<em>blockCommentStart</em>，<em>blockCommentEnd</em>，<em>commentStart</em>和<em>commentEnd</em>在不同的语言环境中表现是不一致的。</p><p><em>lineCommentStart</em>返回当前语言中指示行注释开始的字符。</p><p><em>blockCommentStart</em>和<em>blockCommentEnd</em>则返回当前语言中指示块注释开始，结束的字符。</p><p><em>commentStart</em>和<em>commentEnd</em>视情况而定，若当前语言有行注释则与lineComment表现一致（行注释通常没结束标记<em>commentEnd</em>为空），若没有行注释则与<em>blockComment</em>表现一致。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606010034.png" alt="comment模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606010605.gif" alt="comment模板演示"></p><h3 id="camelCase-lt-String-gt-firstWord-lt-String-gt"><a href="#camelCase-lt-String-gt-firstWord-lt-String-gt" class="headerlink" title="camelCase(&lt;String&gt;)~firstWord(&lt;String&gt;)"></a>camelCase(&lt;String&gt;)~firstWord(&lt;String&gt;)</h3><h4 id="camelCase-lt-String-gt"><a href="#camelCase-lt-String-gt" class="headerlink" title="camelCase(&lt;String&gt;)"></a>camelCase(&lt;String&gt;)</h4><p>将<strong>参数内容</strong>转换为驼峰形式。可以转换空格，下划线，中划线分割的字符串（<em>之后的一些表达式也都是类似机制，因此不再单独录制演示</em>）。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606184836.png" alt="camelCase模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606185330.gif" alt="camelCase模板演示"></p><h4 id="snakeCase-lt-String-gt"><a href="#snakeCase-lt-String-gt" class="headerlink" title="snakeCase(&lt;String&gt;)"></a>snakeCase(&lt;String&gt;)</h4><p>将参数内容字符串转换为下划线分割形式，例如将user name，userName，user-name转换为user_name</p><h4 id="spaceSeparated-lt-String-gt"><a href="#spaceSeparated-lt-String-gt" class="headerlink" title="spaceSeparated(&lt;String&gt;)"></a>spaceSeparated(&lt;String&gt;)</h4><p>将字符串转换为空格分开形式（不会改变原来的大小写状态），例如将<em>userName<em>，</em>user Name<em>和</em>user-Name<em>转换为</em>user Name</em></p><h4 id="spacesToUnderscores-lt-String-gt"><a href="#spacesToUnderscores-lt-String-gt" class="headerlink" title="spacesToUnderscores(&lt;String&gt;)"></a>spacesToUnderscores(&lt;String&gt;)</h4><p>将字符串的空格替换为下划线，例如将user name转换为user_name，将user  name（两个空格）替换为user__name</p><h4 id="capitalize-lt-String-gt"><a href="#capitalize-lt-String-gt" class="headerlink" title="capitalize(&lt;String&gt;)"></a>capitalize(&lt;String&gt;)</h4><p>将字符串首字母设为大写，例如将username转换为Username</p><h4 id="capitalizeAndUnderscore-lt-String-gt"><a href="#capitalizeAndUnderscore-lt-String-gt" class="headerlink" title="capitalizeAndUnderscore(&lt;String&gt;)"></a>capitalizeAndUnderscore(&lt;String&gt;)</h4><p>将字符串转换为大写并用下划线隔开 ，例如将<em>UserName<em>，</em>user name<em>和</em>user-name<em>转换为</em>USER_NAME</em></p><h4 id="decapitalize-lt-String-gt"><a href="#decapitalize-lt-String-gt" class="headerlink" title="decapitalize(&lt;String&gt;)"></a>decapitalize(&lt;String&gt;)</h4><p>将字符串首字母设为小写，例如将Username转换为username</p><h4 id="underscoresToCamelCase-lt-String-gt"><a href="#underscoresToCamelCase-lt-String-gt" class="headerlink" title="underscoresToCamelCase(&lt;String&gt;)"></a>underscoresToCamelCase(&lt;String&gt;)</h4><p>将字符串下划线形式转换为驼峰形式，例如将user_name转换为userName，将user_NAME转换为userName，将USERNAME转换为username。</p><h4 id="underscoresToSpaces-lt-String-gt"><a href="#underscoresToSpaces-lt-String-gt" class="headerlink" title="underscoresToSpaces(&lt;String&gt;)"></a>underscoresToSpaces(&lt;String&gt;)</h4><p>将字符串下划线替换为空格，例如将user_name转换为user name。</p><h4 id="lowercaseAndDash-lt-String-gt"><a href="#lowercaseAndDash-lt-String-gt" class="headerlink" title="lowercaseAndDash(&lt;String&gt;)"></a>lowercaseAndDash(&lt;String&gt;)</h4><p>将字符串转换为小写并用中划线隔开 ，例如将<em>UserName</em>，<em>user name</em>和<em>user_name</em>转换为<em>user-name</em>。</p><h4 id="escapeString-lt-String-gt"><a href="#escapeString-lt-String-gt" class="headerlink" title="escapeString(&lt;String&gt;)"></a>escapeString(&lt;String&gt;)</h4><p>对字符串中的特殊字符进行转义，以便在java字符串中进行使用。例如将”转换为\“。</p><h4 id="substringBefore-lt-String-gt-lt-Delimeter-gt"><a href="#substringBefore-lt-String-gt-lt-Delimeter-gt" class="headerlink" title="substringBefore(&lt;String&gt;, &lt;Delimeter&gt;)"></a>substringBefore(&lt;String&gt;, &lt;Delimeter&gt;)</h4><p>截取字符串在&lt;Delimeter&gt;之前的部分 ，例如substringBefore(“fileName.zip”,”.”)返回fileName。</p><h4 id="firstWord-lt-String-gt"><a href="#firstWord-lt-String-gt" class="headerlink" title="firstWord(&lt;String&gt;)"></a>firstWord(&lt;String&gt;)</h4><p>返回字符串中的第一个单词。例如user name返回user</p><h3 id="castToLeftSideType与rightSideType"><a href="#castToLeftSideType与rightSideType" class="headerlink" title="castToLeftSideType与rightSideType"></a>castToLeftSideType与rightSideType</h3><p>由于<em>castToLeftSideType</em>需要比对左右侧变量类型，左侧类型可以等待任务光标完成编辑，右侧却不行，因此任务光标到达<em>castToLeftSideType</em>变量处时，右侧变量需要是已知类型。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605233922.png" alt="castToLeftSideType模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605234456.gif" alt="castToLeftSideType模板演示"></p><p><em>rightSideType</em>可以获取右侧类型作为默认值，因此任务光标到达时右侧变量也需要是已知类型。<strong>需要注意的是<em>rightSideType</em>似乎必须定义一个默认值，否则将获取不到任何提示</strong>。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200605235759.png" alt="rightSideType模板配置">演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606001000.gif" alt="rightSideType模板演示"></p><h3 id="className-qualifiedClassName"><a href="#className-qualifiedClassName" class="headerlink" title="className~qualifiedClassName"></a>className~qualifiedClassName</h3><p><em>className</em>返回当前类名，可用作构造函数预定义构造函数，日志对象之类的模板。</p><p><em>currentPackage</em>返回当前包名。</p><p><em>qualifiedClassName</em>则是二者的拼接。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200607031712.png" alt="class模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200607031858.gif" alt="class模板演示"></p><h3 id="clipboard"><a href="#clipboard" class="headerlink" title="clipboard"></a>clipboard</h3><p>返回剪贴板内容。</p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606002415.gif" alt="clipboard模板演示"></p><h3 id="componentTypeOf-lt-array-gt"><a href="#componentTypeOf-lt-array-gt" class="headerlink" title="componentTypeOf(&lt;array&gt;)"></a>componentTypeOf(&lt;array&gt;)</h3><p>返回参数的数组类型 。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606194718.png" alt="componentTypeOf模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606195139.gif" alt="componentTypeOf模板演示"></p><h3 id="concat-lt-String-gt-…"><a href="#concat-lt-String-gt-…" class="headerlink" title="concat(&lt;String&gt;, …)"></a>concat(&lt;String&gt;, …)</h3><p>拼接参数中的所有字符串。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606195705.png" alt="concat模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606195914.gif" alt="concat模板演示"></p><h3 id="date-format"><a href="#date-format" class="headerlink" title="date([format])"></a>date([format])</h3><p>指定格式化方式返回当前系统时间字符串，格式化字符串遵循<em>SimpleDateFormat</em>格式。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606200727.png" alt="date模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606201051.gif" alt="date模板演示"></p><h3 id="descendantClassesEnum-lt-String-gt"><a href="#descendantClassesEnum-lt-String-gt" class="headerlink" title="descendantClassesEnum(&lt;String&gt;)"></a>descendantClassesEnum(&lt;String&gt;)</h3><p>返回指定类的子类。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606202904.png" alt="descendantClassesEnum模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606203009.gif" alt="descendantClassesEnum模板演示"></p><h3 id="enum-lt-String-gt-…"><a href="#enum-lt-String-gt-…" class="headerlink" title="enum(&lt;String&gt;, …)"></a>enum(&lt;String&gt;, …)</h3><p>自行指定返回的字符串列表。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606203238.png" alt="enum模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606203340.gif" alt="enum模板演示"></p><h3 id="expectedType"><a href="#expectedType" class="headerlink" title="expectedType"></a>expectedType</h3><p>自动识别并返回期望的类型，可以用于赋值，方法参数，返回语句处。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606204639.png" alt="expectedType模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606204911.gif" alt="expectedType模板演示"></p><h3 id="fileName-fileRelativePath"><a href="#fileName-fileRelativePath" class="headerlink" title="fileName~fileRelativePath"></a>fileName~fileRelativePath</h3><p><em>fileName</em>返回当前文件名（带拓展名）。</p><p><em>fileNameWithoutExtension</em>返回当前文件名（不带拓展名）。</p><p><em>filePath</em>返回文件全路径（带拓展名）。</p><p><em>fileRelativePath</em>返回文件相对当前项目的路径（带拓展名）。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606205424.png" alt="fileName模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606210337.gif" alt="fileName模板演示"></p><h3 id="groovyScript-lt-String-gt-arg-…"><a href="#groovyScript-lt-String-gt-arg-…" class="headerlink" title="groovyScript(&lt;String&gt;, [arg, …])"></a>groovyScript(&lt;String&gt;, [arg, …])</h3><p>执行作为字符串形式传递的<em>groovy</em>脚本，第一个参数为脚本内容或脚本文件路径 ，之后的参数都为可选参数。</p><p>如果要在脚本中调用可选参数可以使用<em>_1，_2，_3</em>以此类推，要访问当前编辑器可以使用<em>_editor</em>变量。</p><p>此段脚本为两个变量做一个简单的拼接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovyScript(&quot;return \&quot;$&#123;_1&#125;\&quot; + \&quot;$&#123;_2&#125;\&quot;&quot;,var1,var2)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200607003349.png" alt="groovyScript模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200607003539.gif" alt="groovyScript模板演示"></p><h3 id="guessElementType-lt-Collection-gt"><a href="#guessElementType-lt-Collection-gt" class="headerlink" title="guessElementType(&lt;Collection&gt;)"></a>guessElementType(&lt;Collection&gt;)</h3><p>返回集合中的泛型类型。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606215632.png" alt="guessElementType模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606220047.gif" alt="guessElementType模板演示"></p><h3 id="iterableComponentType-lt-Iterable-gt"><a href="#iterableComponentType-lt-Iterable-gt" class="headerlink" title="iterableComponentType(&lt;Iterable&gt;)"></a>iterableComponentType(&lt;Iterable&gt;)</h3><p>返回可迭代对象中的泛型类型，使用于数组，对象及其他任意实现Iterable接口的对象。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606220543.png" alt="iterableComponentType模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606220732.gif" alt="iterableComponentType模板演示"></p><h3 id="classNameComplete"><a href="#classNameComplete" class="headerlink" title="classNameComplete"></a>classNameComplete</h3><p>触发一次类名相关的补全提示。</p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606003545.gif" alt="classNameComplete模板演示"></p><h3 id="methodParameters"><a href="#methodParameters" class="headerlink" title="methodParameters"></a>methodParameters</h3><p>获取所有的参数名，返回时在外面拼接[]。</p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606012053.gif" alt="methodParameters模板演示"></p><h3 id="regularExpression-lt-String-gt-lt-Pattern-gt-lt-Replacement-gt"><a href="#regularExpression-lt-String-gt-lt-Pattern-gt-lt-Replacement-gt" class="headerlink" title="regularExpression(&lt;String&gt;, &lt;Pattern&gt;, &lt;Replacement&gt;)"></a>regularExpression(&lt;String&gt;, &lt;Pattern&gt;, &lt;Replacement&gt;)</h3><p>查找字符串中满足&lt;Pattern&gt;的所有部分并替换为&lt;Replacement&gt;  ，支持所有标准正则表达式。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606221424.png" alt="regularExpression模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606222357.gif" alt="regularExpression模板演示"></p><h3 id="typeOfVariable-lt-String-gt"><a href="#typeOfVariable-lt-String-gt" class="headerlink" title="typeOfVariable(&lt;String&gt;)"></a>typeOfVariable(&lt;String&gt;)</h3><p>返回变量的类型。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606230055.png" alt="typeOfVariable模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606230237.gif" alt="typeOfVariable模板演示"></p><h3 id="variableOfType-lt-String-gt-subtypes-lt-String-gt"><a href="#variableOfType-lt-String-gt-subtypes-lt-String-gt" class="headerlink" title="variableOfType(&lt;String&gt;)~ subtypes(&lt;String&gt;)"></a>variableOfType(&lt;String&gt;)~ subtypes(&lt;String&gt;)</h3><p><em>variableOfType</em>返回所有满足类型条件的变量，如果传入””则会返回所有的可用变量，距离较近的变量优先展示。</p><p><em>suggestFirstVariableName</em>和<em>variableOfType</em>类似，但不会推荐true，false，this，和super。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200607001701.png" alt="variableOfType和suggestFirstVariableName对比"></p><p><em>subtypes</em>返回指定类型的子类型。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606232013.png" alt="variableOfType与subtypes模板配置"></p><p>演示：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200606232351.gif" alt="variableOfType与subtypes模板演示"></p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏捷开发，代码重构。Idea不得不提的三大技巧</title>
      <link href="/2020/05/30/Idea%20Tips/"/>
      <url>/2020/05/30/Idea%20Tips/</url>
      
        <content type="html"><![CDATA[<h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><p>多光标操作，是一款优秀的编辑器的基本职能。</p><p>在idea中利用<em>Alt</em>键可以轻松的一次性拉取多行进行多点编辑操作：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530000428.gif" alt="Alt多点编辑"></p><p>如果需要按点选择，则可以按<em>Alt</em>+<em>Shift</em>选择编辑：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530001522.gif" alt="多点光标操作"></p><p><em>Ctrl</em>+<em>Alt</em>+<em>Shift</em>则包揽了行选择和点选择的功能：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530011728.gif" alt="点选择和行选择"></p><p>组合其他快捷键使用可以完成相对复杂的操作，例如将原有类变量的行注释，变更为段注释。</p><p>这里用到了<em>Ctrl</em> + <em>Alt</em>  +<em>Shift</em> + <em>J</em> 和 <em>Ctrl</em>+<em>W</em>。</p><p>前者可以选中当前文件中所有相同的内容，如果光标没有选择范围则默认为附近的一个词。</p><p>而后者则可以选中当前光标附近的词。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530003612.gif" alt="行注释变更"></p><p>利用<em>Ctrl</em>+<em>W</em>可以轻易找到多个编辑点内容开头结尾</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530005717.gif" alt="多光标不同长度末尾编辑"></p><h2 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h2><p>idea文本替换功能支持所有的标准正则表达式，利用正则表达式可以完成很多复杂的功能。</p><p>使用正向和反向预查正则可以仅替换满足指定条件的文本，这个表达式可以替换被</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li class=&quot;nav-li&quot;&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>包裹的中文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=&lt;li class=&quot;nav-li&quot;&gt;)[\u4e00-\u9fa5]*(?=&lt;/li&gt;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530021213.gif" alt="预查替换"></p><p>idea支持使用小括号对正则进行分组，然后进行取值替换，上面将行注释变更的功能使用分组替换也可以完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\/\/ ([\u4e00-\u9fa5]*)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530022122.gif" alt="行注释正则替换"></p><p>利用复杂的正则表达式可以简便的完成数据库方言的替换。</p><p>例如时间格式化字符串在Oracle中是<em>yyyymmddHH24miss*而在mysql中却是</em>%Y%m%d%H%i%s*。</p><p>替换正则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(yyyy)(-|/)*?(mm)(-|/)*?(dd)(\s)*?(HH24)(:*?)(mi)(:*?)(ss)</span><br></pre></td></tr></table></figure><p>替换为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%Y$2%m$4%d$6%H$8%i$10%s</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530024154.gif" alt="数据库方言替换"></p><p>用好正则替换功能将会给代码重构带来极大的便利。</p><p>除了标准的正则表达式外，idea还支持在替换时修改替换文本的大小写属性（该功能不支持全局替换）。</p><table><thead><tr><th align="center">表达式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">\l</td><td align="center">将替换文本的首字母置为小写</td></tr><tr><td align="center">\u</td><td align="center">将替换文本的首字母置为大写</td></tr><tr><td align="center">\L</td><td align="center">将替换文本置为小写，可以使用\E标记停止</td></tr><tr><td align="center">\U</td><td align="center">将替换文本置为大写，可以使用\E标记停止</td></tr></tbody></table><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530025950.gif" alt="大小写转置"></p><h2 id="后缀补全"><a href="#后缀补全" class="headerlink" title="后缀补全"></a>后缀补全</h2><p>对对象使用调用符<em>.</em>时idea除了会弹出调用方法的提示，还会弹出一些预定义的后缀模板，利用这些后缀模板可以大幅减少移动光标的次数：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530160430.gif" alt="后缀补全"></p><p>官网预定义的模板可以满足大部分场景，但有些调用Api并不满足需要，在<em>2018.01</em>版本后的idea允许自定义后缀模板（旧版本可以使用插件<em>Custom Postfix Templates</em>）。</p><p>按<em>Ctrl</em>+<em>Shift</em>+<em>A</em>搜索postfix completion或者Setting=&gt;General=&gt;PostFix Completion打开postfix completion编辑页面。</p><p>这里允许自定义后缀模板：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530175952.png" alt="image-20200530175945024"></p><p>定义的模板中可以配置关键词，语言版本，适用的变量类型等，这里为任意对象定义一个Optional.orElse的模板：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530180831.png" alt="image-20200530180831492"></p><p><em>$EXPR$*模板生效后变量将处在的位置，</em>$END$*则标记了光标最后处在的位置：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530181308.gif" alt="自定义表达式"></p><p>唯一遗憾的一点是官方文档中并未说明多任务光标要如何定义，期待官方后续版本能够开发这个设置。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200530181955.gif" alt="多任务光标"></p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我和杰瑞的恩怨情仇</title>
      <link href="/2020/05/25/%E6%88%91%E5%92%8C%E6%9D%B0%E7%91%9E%E7%9A%84%E6%81%A9%E6%80%A8%E6%83%85%E4%BB%87/"/>
      <url>/2020/05/25/%E6%88%91%E5%92%8C%E6%9D%B0%E7%91%9E%E7%9A%84%E6%81%A9%E6%80%A8%E6%83%85%E4%BB%87/</url>
      
        <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>两年前我和两个基友合租了两室一卫，我和一个基友睡在里间，另一个基友睡在外间。</p><p>七天长假前夕我们定好了很多计划，准备国庆七天乐，头秃也快乐。</p><p>然鹅，在放假的前夕，外间的基友忽然放了我们鸽子。他打算不带我们两个糙汉子玩了，要和远在首都的女友双宿双飞。</p><p>明明是三个人的故事，就剩我们两个在表演。</p><p>我和基友笑着送走了他，然后不约而同的以发布色情内容为由举报了他的企鹅号。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163459.jpg" alt="举报"></p><p>假期来临，我和基友很默契的没有提起那些其实两个人也能完成的计划。</p><p>我坐在床上架着我的小桌子刷B站，他坐在床沿刷着他的布袋戏。</p><p>每到饭点我们才默契的对视一眼:</p><p>“出去吃？”</p><p>然后各自掏出手机挑选心仪的外卖。</p><p>这样的日子过了两天，我实在无法忍受这一成不变的生活。</p><p>于是我起身伸了个懒腰，看了看窗外，又看了看专注的基友。</p><p>要不还是别打扰他了？我最终挪了挪床上的屁股印。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>第三天，事情发生了一些变化。</p><p>中午我拿外卖时路过外间的门发现有一些木屑散落在附近。</p><p>回来基友表情凝重的告诉我，外间可能有老鼠。</p><p>我看着他的表情嘲笑他小题大做，详细跟他阐述了我们这几个月和蟑螂达成生态平衡的过程。</p><p>接着我尝试向他输出都是四害我们可以打败第一个，就能打败第二个的观点。</p><p>他似乎被说服了，我不禁被自己的口才折服，又拯救了一个安静祥和的日子。</p><p>我成功用智商辜负了木门用生命为我们带来的预警，忘记了，大和小，是有区别的。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163542.jpg" alt="毕加思索"></p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>我一直睡得比较晚，每天都在为不做俯卧撑不跑步达到琦玉老师的成就这个目标做努力。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163624.jpg" alt="变强"></p><p>旁边的基友早已经睡去，并发出不小的呼声。</p><p>凌晨两点我开始有了困意，戴上耳机准备睡觉。</p><p>几个月的磨合，我早已经成功让耳机中的音乐声和耳畔的呼声达成一种动态平衡，让自己的睡眠质量保持在巅峰状态。</p><p>我感觉到，可能是白天我的三寸不烂之舌疗效还差了几分，今晚基友的呼声似乎大了一些，并且频率也有些不同，似乎带有一丝慌乱。</p><p>但这并不影响我即将入睡的大局，我调大了一点音量，沉沉睡去。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163647.jpg" alt="问题不大"></p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>凌晨三点，我被一阵撞门声吵醒，似乎有什么东西在外间疯狂撞门。</p><p>我心里一慌，难道是老鼠？</p><p>下意识看了一眼旁边的基友，他仍沉沉的睡着。</p><p>白天我对他的无情嘲讽让我没办法舔着脸向他求助。</p><p>毕竟我也不想我高大伟岸的形象莫名多出一个没法抹去的污点。</p><p>半夜被老鼠吓得喊人什么的说出去还是太难听了。</p><p>起码搏斗一番后失败了，还能算是半个工伤，以此让他可怜为我保守下秘密啥的。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163709.jpg" alt="要脸"></p><p>求助方案被大脑内部否决了。</p><p>我只好不停用白天说服基友的一套尝试说服自己和邪恶的四害作斗争。</p><p>然鹅在越发凶狠的撞门下我最终还是选择向邪恶势力低头，随即打算当个鸵鸟继续睡觉。</p><p>闭上眼后发现问题来了，原本耳机中的音乐和一旁呼声的动态平衡被撞门声破坏了，在这嘈杂的声音中我无法入睡了。</p><p>之前我都是用耳机的音量解决这个问题，可现在耳机声音如果再调大，明天基友可能就得贴着我的耳膜说话了。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163731.gif" alt="听不到"></p><p>但这个困境不足以支撑我起身对抗邪恶的勇气，毕竟它听起来实在太大了。</p><p>我尝试数水饺催眠自己，数着数着，居然有了一丝对抗邪恶的勇气。</p><p>不知道老鼠肉味道怎么样？</p><p>我的身体还是很诚实的毫不动弹，毕竟理智告诉我，就算打赢了，今晚我也吃不到。</p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>这样坚持了半个小时，我的神经一直紧绷着，一阵一阵的撞门声刺激着我的神经，我实在无法忍受了，一下子从床上弹了起来，头也不回的冲进厕所蹲了一会。</p><p>在里面我盘算着拿上马桶搋子和它决一死战，但打着手电环视了一圈，发现我们没有买马桶搋子。</p><p>我依稀回忆起当时我警惕的眼神让基友放弃这个提案的场景，现在我有一丝后悔。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163800.jpg" alt="警惕"></p><p>出来后，我四下寻找趁手的武器。</p><p>找了一会，我意识到事情有点不妙，唯一能用的武器可能在门外的敌人手里。</p><p>我最终在拖鞋和衣架之中选择了衣架作为我战斗的武器，虽然都比不上敌人手里的，毕竟还是一寸长一寸强。</p><p>靠着武器给我带来的微弱安全感，我渐渐地移到了门前，开始迟疑，老鼠已经有一会没有动静了，会不会在埋伏我？</p><p>但这时候我已经没有退路了，再这样熬下去，我明天可能要因为参与多人运动被基友举报涉黄了。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163825.jpg" alt="多人运动"></p><p>我用手电照了照床上的基友，他还在沉沉的睡着，就是眉头有点皱，看来老鼠的撞门声还是影响到了他的睡眠质量。</p><p>我还是有点拿不定主意，并试图通过正道之光的照耀让我多一个战友。</p><p>可惜我失算了，果然男人都是大猪蹄子，当时<del>搂着</del>搭着我的肩膀说要罩着我的男人，现在就让我一个人面对危险。</p><p>照了几分钟，我放弃了不切实际的幻想，最终决定还是开门，虽然我睡得晚，还是希望能够睡得好一点。</p><p>我在心里为自己打气，或许不是老鼠，是蟑螂呢？</p><p>这样想着我打了个冷颤，虽然细思极恐，我还是打算开门了，<strong>蟑螂吓不到一米八五(大概吧)的勇士，但老鼠可以</strong>。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163849.gif" alt="吓到"></p><p>打开房门，我当即谨慎了起来试图通过地毯式搜索找到那个罪魁祸首。</p><p>谨慎的我搜遍了外间的每一个角落。</p><p>找了几圈都没有找到那个罪魁祸首，能找到的只有几只小蟑螂。</p><p>然而这些蟑螂的体型告诉我，它们做不到破坏我的动态平衡。</p><p>我一脸疑惑的又打开外间的灯搜了几圈，还是没能找到肇事者。</p><p>难道真的是蟑螂？</p><p>我看着那些小东西，随即将他们用扫把处理了一下，找了个袋子装在了一起，并打了好几个死结。</p><p>做完这一切，我长舒一口气，回到里间，关上了门。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163909.jpg" alt="搞定"></p><p>想想又觉得不保险，于是我又找了个箱子堵住了门。</p><p>虽然内心还觉得有一丝不对，但困意还是让我带着胜利的喜悦，沉沉睡去。</p><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>白天，我迷迷糊糊的睁眼看见基友一脸把我绿了似的坐在床边。</p><p>这个场景，对于生命不足三十年的我来说，有点超纲了。</p><p>我怀疑，他是不是没忍住，把我昨晚的战利品偷吃了？</p><p>我试探性地安慰了一句:</p><p>“吃了就吃了，也不是啥大事。”</p><p>他楞了一下，这句话对他来说可能也超纲了。</p><p>他没有回答我，只是软软地说了句:</p><p>“我被老鼠咬了”</p><p><strong>靠！家被偷了。</strong></p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200525163940.png" alt="家被偷了"></p><p>我看着基友的表情，心里一软，那天，陪基友去医院做检查打疫苗我特别积极，基友很无辜。</p><p>这个故事里，老鼠和我，没有一个是无辜的。</p><p>下次玩王者的时候，我一定记得把家守好。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 沙雕树洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro权限注解与Aop冲突的前世今生</title>
      <link href="/2020/05/23/Shiro%E6%9D%83%E9%99%90%E6%B3%A8%E8%A7%A3%E4%B8%8EAop%E5%86%B2%E7%AA%81%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
      <url>/2020/05/23/Shiro%E6%9D%83%E9%99%90%E6%B3%A8%E8%A7%A3%E4%B8%8EAop%E5%86%B2%E7%AA%81%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<p>在做springboot和shiro集成时，在度娘的多篇博文上相关<strong>DefaultAdvisorAutoProxyCreator</strong>有下图的描述，但实际测试时将usePrefix和proxyTargetClass二者任意一值设为true都可以解决无法映射请求的问题，此文即是基于此的拓展，有兴趣的童鞋可以在<a href="https://gitee.com/gonghs/jianshu/tree/master/shiro-permissions-aop" target="_blank" rel="noopener">测试项目</a>中进行测试。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200516234106.png" alt="image-20200516234105315"></p><h2 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h2><p>要搞明白为这两个配置能够解决这个问题，可以先从<strong>DefaultAdvisorAutoProxyCreator</strong>开始看起，从类名上我们很容易得知这是spring自动代理创建器之一。该类可以对通知器进行过滤。</p><p>源码注释中表明，通过设置usePrefix值为true，类将仅在通知器bean名称为advisorBeanNamePrefix+.时生效。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517001822.png" alt="image-20200517001821588"></p><p>而proxyTargetClass则配置了代理时是否时基于类代理。</p><p>由前面两点可以猜测</p><ul><li>usePrefix能够解决这个问题，是由于具体问题的发生场景和通知器bean名称有关，由于usePrefix使某个通知器被过滤使问题被解决。</li><li>proxyTargetClass能够解决这个问题，是因为此配置修改了代理机制，使代理的冲突消失了。</li></ul><p>猜测不一定是正确的，并且由于二者都可以解决这个问题，还需要探求二者之间的关联。</p><h2 id="由请求开始"><a href="#由请求开始" class="headerlink" title="由请求开始"></a>由请求开始</h2><p>当aop与权限注解共存时，不对<strong>DefaultAdvisorAutoProxyCreator</strong>进行任何配置并跟踪请求，部分执行链如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// &#123;&#125;表示同上</span><br><span class="line">.</span><br><span class="line">├── DispatcherServlet.doService</span><br><span class="line">│   ├── DispatcherServlet.doDispatch</span><br><span class="line">│   ├── DispatcherServlet.getHandler</span><br><span class="line">│   ├── AbstractHandlerMapping.getHandler</span><br><span class="line">│   ├── RequestMappingInfoHandlerMapping.getHandlerInternal</span><br><span class="line">│   └── AbstractHandlerMethodMapping.lookupHandlerMethod</span><br></pre></td></tr></table></figure><p>之所以跟踪这个请求，是由于在<em>doDispatch</em>方法中的<strong>HandlerExecutionChain</strong>类型变量是spring由容器中取得的实际处理请求的对象。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517004213.png" alt="image-20200517004212046"></p><p>以下是测试控制器的部分代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(<span class="string">"admin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong>AbstractHandlerMethodMapping</strong>.<em>lookupHandlerMethod</em>中，可以看到此处从一个映射注册表中的两个hashMap对象中为请求获取最合适的处理方法，而在映射注册表中根本不存在我们的自定义控制器，由此得知问题的根源在于映射注册表中控制器的缺失。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517010755.png" alt="image-20200517010753991"></p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517012547.png" alt="异常与错误图对比"></p><h2 id="映射注册表初始化"><a href="#映射注册表初始化" class="headerlink" title="映射注册表初始化"></a>映射注册表初始化</h2><p>在<strong>AbstractHandlerMethodMapping</strong>类中对类变量mappingRegistry进行查找，可以找到<em>registerHandlerMethod</em>方法，用于向注册表中注册处理方法。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517123703.png" alt="image-20200517123702327"></p><p>而该方法的调用在<em>detectHandlerMethods</em>方法中，通过对该方法断点调试(启动时)并向上查找堆栈信息，我们可以得到这样一条调用链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AbstractAutowireCapableBeanFactory.invokeInitMethods</span><br><span class="line">│   ├── RequestMappingHandlerMapping.afterPropertiesSet</span><br><span class="line">│├── AbstractHandlerMethodMapping.afterPropertiesSet</span><br><span class="line">│   ├── AbstractHandlerMethodMapping.initHandlerMethods</span><br><span class="line">│   ├── AbstractHandlerMethodMapping.processCandidateBean</span><br><span class="line">│   └── AbstractHandlerMethodMapping.detectHandlerMethods</span><br></pre></td></tr></table></figure><p><strong>RequestMappingHandlerMapping</strong>是springboot WebMvcAutoConfiguration中预定义的，自动初始化的bean，用于处理被<em>RequestMapping</em>注解标记的方法。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517151501.png" alt="image-20200517151500795"></p><p>而由于该类父类实现了InitializingBean接口，bean初始化完毕时会调用<em>afterPropertiesSet</em>方法，由调用链可以看出，映射注册表的初始化即是由这个逻辑促成的。跟踪正常映射的请求可以验证这一点：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517152330.png" alt="image-20200517152329552"></p><p><strong>AbstractHandlerMethodMapping</strong>.<em>processCandidateBean</em>方法中可以找到类能否被注册进映射注册表的逻辑：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517153008.png" alt="image-20200517153006969"></p><p>spring从应用上下文中获取根据名称获取对应bean的类对象并根据类对象中是否含有Controller和RequestMapping注解来判断是否注册。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517153217.png" alt="image-20200517153216257"></p><p>通过调试可以看到加入权限异常映射的bean，在容器中取到的类对象是代理对象，下面是几种情况取到的类对象：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517184949.png" alt="获取bean结果比对"></p><p>可以看到前者取到的对象是由jdk动态代理的，而后两者取到的对象都是由cglib代理的。</p><p>除此之外当方法只被aop注解标记时也是获得的类对象也是由cglib代理的，当类路径中不存在Advice类时bean是原始类对象，此时权限注解不生效。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200517233935.png" alt="image-20200517233933042"></p><p>由以上情况又引申出了三个问题：</p><ul><li>为什么在jdk动态代理的情况下认为不存在注解</li><li>使用哪种代理方式是如何判断的</li><li>为什么设置usePrefix时需要使用cglib代理</li></ul><h2 id="如何判断注解的存在"><a href="#如何判断注解的存在" class="headerlink" title="如何判断注解的存在"></a>如何判断注解的存在</h2><p>这里涉及到调用链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AnnotatedElementUtils.hasAnnotation</span><br><span class="line">│   ├── TypeMappedAnnotations.isPresent</span><br><span class="line">│├── TypeMappedAnnotations.scan</span><br><span class="line">│   ├── AnnotationsScanner.scan</span><br><span class="line">│   ├── AnnotationsScanner.scan</span><br><span class="line">│   ├── AnnotationsScanner.process</span><br><span class="line">│   ├── AnnotationsScanner.processClass</span><br><span class="line">| └── AnnotationsScanner.processClassHierarchy</span><br></pre></td></tr></table></figure><p>在<strong>AnnotationsScanner</strong>.<em>processClassHierarchy</em>中可以看到spring首先判断类对象上是否存在注解，如果不存在则递归查找该类对象父类，所有的接口和内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按层次执行类查找</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context 需要寻找的注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aggregateIndex</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> source 类对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> processor 注解处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classFilter 类过滤(判断是否要忽略某些类查找)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> includeInterfaces 是否包含接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> includeEnclosing 是否包含匿名内部类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;R&gt; 此处为Boolean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 匹配成功返回true 否则返回false或者null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;C, R&gt; <span class="function">R <span class="title">processClassHierarchy</span><span class="params">(C context, <span class="keyword">int</span>[] aggregateIndex, Class&lt;?&gt; source, AnnotationsProcessor&lt;C, R&gt; processor, @Nullable BiPredicate&lt;C, Class&lt;?&gt;&gt; classFilter, <span class="keyword">boolean</span> includeInterfaces, <span class="keyword">boolean</span> includeEnclosing)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        R result = processor.doWithAggregate(context, aggregateIndex[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 是否仅有普通的java注解</span></span><br><span class="line">        <span class="keyword">if</span> (hasPlainJavaAnnotationsOnly(source)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断类本身是否存在注解</span></span><br><span class="line">        Annotation[] annotations = getDeclaredAnnotations(context, source, classFilter, <span class="keyword">false</span>);</span><br><span class="line">        result = processor.doWithAnnotations(context, aggregateIndex[<span class="number">0</span>], source, annotations);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        aggregateIndex[<span class="number">0</span>]++;</span><br><span class="line">        <span class="comment">// 如果存在实现接口则遍历接口执行查找 判断接口上是否存在该注解</span></span><br><span class="line">        <span class="keyword">if</span> (includeInterfaces) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; interfaceType : source.getInterfaces()) &#123;</span><br><span class="line">                R interfacesResult = processClassHierarchy(context, aggregateIndex,</span><br><span class="line">                        interfaceType, processor, classFilter, <span class="keyword">true</span>, includeEnclosing);</span><br><span class="line">                <span class="keyword">if</span> (interfacesResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> interfacesResult;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向上查找所有父类</span></span><br><span class="line">        Class&lt;?&gt; superclass = source.getSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (superclass != Object<span class="class">.<span class="keyword">class</span> &amp;&amp; <span class="title">superclass</span> !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">            R superclassResult = processClassHierarchy(context, aggregateIndex,</span><br><span class="line">                    superclass, processor, classFilter, includeInterfaces, includeEnclosing);</span><br><span class="line">            <span class="keyword">if</span> (superclassResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> superclassResult;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查找内部类</span></span><br><span class="line">        <span class="keyword">if</span> (includeEnclosing) &#123;</span><br><span class="line">            <span class="comment">// Since merely attempting to load the enclosing class may result in</span></span><br><span class="line">            <span class="comment">// automatic loading of sibling nested classes that in turn results</span></span><br><span class="line">            <span class="comment">// in an exception such as NoClassDefFoundError, we wrap the following</span></span><br><span class="line">            <span class="comment">// in its own dedicated try-catch block in order not to preemptively</span></span><br><span class="line">            <span class="comment">// halt the annotation scanning process.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; enclosingClass = source.getEnclosingClass();</span><br><span class="line">                <span class="keyword">if</span> (enclosingClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    R enclosingResult = processClassHierarchy(context, aggregateIndex, enclosingClass, processor, classFilter, includeInterfaces, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">if</span> (enclosingResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> enclosingResult;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                AnnotationUtils.handleIntrospectionFailure(source, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        AnnotationUtils.handleIntrospectionFailure(source, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用cglib代理的情况下，可以在父类中查找到原始类对象，并获取到注解。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200518170628.png" alt="image-20200518170620227"></p><p>而在jdk动态代理情况下获得的对象中无法从类的父子关系，接口实现，内部类中得到原始类对象，也就无法获得原始注解。</p><p>以上可以得知代理方式的变更会导致类无法注册入映射注册表，导致bean无法映射请求。</p><p>在上面的探究中对比两种代理类的实现接口还发现，获取到jdk动态代理类对象时似乎被二次代理了，其中的原因我们放到后面再探究。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200518174546.png" alt="实现接口比对"></p><h2 id="代理方式的选择"><a href="#代理方式的选择" class="headerlink" title="代理方式的选择"></a>代理方式的选择</h2><h3 id="bean的后置处理"><a href="#bean的后置处理" class="headerlink" title="bean的后置处理"></a>bean的后置处理</h3><p>要了解这个问题，需要对bean的创建过程进行跟踪：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AbstractAutowireCapableBeanFactory.doCreateBean</span><br><span class="line">│   ├── &#123;&#125;.initializeBean</span><br><span class="line">│├── &#123;&#125;.applyBeanPostProcessorsAfterInitialization</span><br><span class="line">│   ├── AbstractAutoProxyCreator.postProcessAfterInitialization</span><br><span class="line">│   ├── AbstractAutoProxyCreator.wrapIfNecessary</span><br><span class="line">│   ├── &#123;&#125;.createProxy</span><br><span class="line">│   ├── AnnotationsScanner.processClass</span><br><span class="line">| └── AnnotationsScanner.processClassHierarchy</span><br></pre></td></tr></table></figure><p>在bean初始化完成后将在<strong>AbstractAutowireCapableBeanFactory</strong>.<em>applyBeanPostProcessorsAfterInitialization</em>方法进行后置处理，spring从容器中获取所有的后置处理器即所有实现BeanPostProcessor接口的bean对bean进行后置处理，在这里可以找到<strong>DefaultAdvisorAutoProxyCreator</strong></p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200522230800.png" alt="image-20200522230758590"></p><p>在跟踪<strong>DefaultAdvisorAutoProxyCreator</strong>之前，先跟踪<strong>AnnotationAwareAspectJAutoProxyCreator</strong>，以了解一个正常执行的代理流程。</p><h3 id="AnnotationAwareAspectJAutoProxyCreator的加载"><a href="#AnnotationAwareAspectJAutoProxyCreator的加载" class="headerlink" title="AnnotationAwareAspectJAutoProxyCreator的加载"></a><strong>AnnotationAwareAspectJAutoProxyCreator</strong>的加载</h3><p><strong>AnnotationAwareAspectJAutoProxyCreator</strong>是spring aop工作的重要构建器，上文我们猜测异常bean可能被二次代理了，第一次代理便是来自spring aop的代理。</p><p>在AopAutoConfiguration可以看到在默认配置（且存在Advice类）下使用注解开启了Aspect J自动代理</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200521225006.png" alt="image-20200521224957601"></p><p>在此注解存在的情况下<strong>AspectJAutoProxyRegistrar</strong>将工作，这里将进行<strong>AnnotationAwareAspectJAutoProxyCreator</strong>的注册工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AspectJAutoProxyRegistrar.registerBeanDefinitions</span><br><span class="line">│   ├── AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><br><span class="line">│└── &#123;&#125;.registerOrEscalateApcAsRequired</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200521225633.png" alt="image-20200521225632059"></p><p>可以看到此处为bean定义在注册表中指定了名称</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200521230101.png" alt="image-20200521230100754"></p><p>并且在另一处自动配置中将proxyTargetClass值设为了true：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200521230331.png" alt="image-20200521230329847"></p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200521230256.png" alt="image-20200521230255707"></p><p><strong>AbstractAutoProxyCreator</strong>.<em>wrapIfNecessary</em>可以跟踪到<strong>AnnotationAwareAspectJAutoProxyCreator</strong>的创建代理的工作流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按需包装(代理)bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName bean名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cacheKey 缓存key 用以标记该bean是否需要被通知</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 包装(代理)后的bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this.advisedBeans在postProcessBeforeInstantiation即前置操作中初始化过一次 </span></span><br><span class="line"><span class="comment">// 这里是跳过已经预先知道不需要被通知的bean</span></span><br><span class="line">    <span class="keyword">if</span> (Boolean.FALSE.equals(<span class="keyword">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在bean的前置处理时其实已经做过类似的判断</span></span><br><span class="line"><span class="comment">// isInfrastructureClass是判断是否为aop的基础设施类 诸如Advice，Pointcut，Advisor等</span></span><br><span class="line"><span class="comment">// shouldSkip是由bean名称判断是否为原始示例 如果为是（名称为bean类名+.ORIGINAL）则跳过</span></span><br><span class="line">    <span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create proxy if we have advice.</span></span><br><span class="line">    <span class="comment">// 获取所有的通知bean 存在则进行代理操作</span></span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">        <span class="comment">// 创建代理</span></span><br><span class="line">        Object proxy = createProxy(</span><br><span class="line">                bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</span><br><span class="line">        <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不存在通知类 则标记为不需要通知</span></span><br><span class="line">    <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建代理时用到了创建器本身的proxyTargetClass属性用以判断是否基于类代理，这里前面提到，在自动配置时就已经将该bean proxyTargetClass属性默认设置为true，因此由该类创建的代理对象默认都是基于cglib代理的：</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200523190044.png" alt="image-20200523190042803"></p><p>如果在配置中配置默认代理方式不基于类（spring.aop.proxy-target-class =false），但类不存在合适的代理接口，spring仍可能选择cglib代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评估接口是否适合代理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanClass bean类对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> proxyFactory 代理工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">evaluateProxyInterfaces</span><span class="params">(Class&lt;?&gt; beanClass, ProxyFactory proxyFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取所有实现接口</span></span><br><span class="line">    Class&lt;?&gt;[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader());</span><br><span class="line">    <span class="keyword">boolean</span> hasReasonableProxyInterface = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; ifc : targetInterfaces) &#123;</span><br><span class="line">        <span class="comment">// isConfigurationCallbackInterface判断接口是否配置回调接口 例如：InitializingBean，Closeable等</span></span><br><span class="line">        <span class="comment">// isInternalLanguageInterface判断接口是否内部语言接口 例如：GroovyObject，cglib代理工厂接口等</span></span><br><span class="line">        <span class="keyword">if</span> (!isConfigurationCallbackInterface(ifc) &amp;&amp; !isInternalLanguageInterface(ifc) &amp;&amp;</span><br><span class="line">                ifc.getMethods().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            hasReasonableProxyInterface = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasReasonableProxyInterface) &#123;</span><br><span class="line">        <span class="comment">// Must allow for introductions; can't just set interfaces to the target's interfaces only.</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; ifc : targetInterfaces) &#123;</span><br><span class="line">            proxyFactory.addInterface(ifc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有合适的实现接口则也设置为true</span></span><br><span class="line">        proxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一点也解释了为何不引入spring aop的情况下权限注解可用，有兴趣的童鞋可以尝试下载代码进行设置跟踪。这里只讲结论：</p><ul><li>不引入spring aop只有<strong>DefaultAdvisorAutoProxyCreator</strong>生效的情况下，bean实例仍是cglib代理的。</li><li>引入了spring aop时<strong>DefaultAdvisorAutoProxyCreator</strong>获得的类是已代理的，有了在此判断外的实现接口，被判断为适合接口代理，因此bean实例最终使用了jdk动态代理。</li></ul><h3 id="DefaultAdvisorAutoProxyCreator的工作"><a href="#DefaultAdvisorAutoProxyCreator的工作" class="headerlink" title="DefaultAdvisorAutoProxyCreator的工作"></a>DefaultAdvisorAutoProxyCreator的工作</h3><p><strong>DefaultAdvisorAutoProxyCreator</strong>和<strong>AnnotationAwareAspectJAutoProxyCreator</strong>的工作过程基本类似。从以上工作过程中其实可以大概了解（实际也是如此），<strong>DefaultAdvisorAutoProxyCreator</strong>异常工作时，对bean再次进行了代理行为，由于该类的proxyTargetClass的默认值为false，且获取的代理对象被判断为适合接口代理，因此采用了jdk动态代理，从bean实例上来看就是被二次代理了。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200523141227.png" alt="image-20200523141226334"></p><p>另外需要提及的是当仅proxyTargetClass为true时虽然进行了两次代理，代理类上获取的直接父类还是原始类（而不是父类的父类才是原始类）。详见：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AbstractAutoProxyCreator.wrapIfNecessary</span><br><span class="line">│   ├── &#123;&#125;.createProxy</span><br><span class="line">│├── ProxyFactory.getProxy</span><br><span class="line">|└──CglibAopProxy.getProxy</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200523170811.png" alt="image-20200523170810525"></p><h2 id="为什么设置usePrefix时需要使用cglib代理"><a href="#为什么设置usePrefix时需要使用cglib代理" class="headerlink" title="为什么设置usePrefix时需要使用cglib代理"></a>为什么设置usePrefix时需要使用cglib代理</h2><p>这里的问题其实应该是，为什么设置usePrefix为true时不进行代理，事实上usePrefix为true时，<strong>DefaultAdvisorAutoProxyCreator</strong>是不工作的。</p><p>这里需要从<em>getAdvicesAndAdvisorsForBean</em>方法中进行跟踪，因为当设置usePrefix为true时，该方法取到的通知器是空的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AbstractAutoProxyCreator.wrapIfNecessary</span><br><span class="line">│   ├── &#123;&#125;.getAdvicesAndAdvisorsForBean</span><br><span class="line">│├── AbstractAdvisorAutoProxyCreator.findEligibleAdvisors</span><br><span class="line">│   ├── &#123;&#125;.findCandidateAdvisors</span><br><span class="line">│   └── BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans</span><br></pre></td></tr></table></figure><p>在<strong>BeanFactoryAdvisorRetrievalHelper</strong>.<em>findAdvisorBeans</em>中，从容器中取得的通知器是否要最终返回用于代理，存在<em>isEligibleBean</em>判断。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200523143346.png" alt="image-20200523143345185"></p><p>前面都是和构建器父层抽象类打交道，到这里终于和<strong>DefaultAdvisorAutoProxyCreator</strong>本身打上了交道。</p><p>这个判断最终使用了<strong>DefaultAdvisorAutoProxyCreator</strong>.<em>isEligibleAdvisorBean</em>的返回结果。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200523144139.png" alt="image-20200523144138787"></p><p>在<strong>DefaultAdvisorAutoProxyCreator</strong>.<em>isEligibleAdvisorBean</em>中得知，当usePrefix为false时该方法总是返回true，而当usePrefix为true时需要判断bean名称是否以类属性advisorBeanNamePrefix+.开头判断如何返回。</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200523144605.png" alt="image-20200523144605015"></p><p>当只定义了usePrefix为true而未定义advisorBeanNamePrefix时，大部分情况下bean名称是无法匹配的，因此通知器无法返回，也就不会执行具体的代理行为。而定义usePrefix为false时代理行为总是执行的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>再次提出之前的两条猜测：</p><ul><li>usePrefix能够解决这个问题，是由于具体问题的发生场景和通知器bean名称有关，由于usePrefix使某个通知器被过滤使问题被解决。</li><li>proxyTargetClass能够解决这个问题，是因为此配置修改了代理机制，使代理的冲突消失了。</li></ul><p>现在看，两个猜测都是部分正确的，并且以上的探究对其进行了拓展，在探究的过程中我们得知，冲突的本质在于是否使用jdk动态代理，只要bean没有被jdk动态代理，这个映射问题就不会存在。下面是各种场景下的运行情况：</p><table><thead><tr><th align="center">开启AOP</th><th align="center">usePrefix</th><th align="center">proxyTargetClass</th><th align="center">代理情况</th><th align="center">运行情况</th></tr></thead><tbody><tr><td align="center">是</td><td align="center">false</td><td align="center">false</td><td align="center">jdk+cglib</td><td align="center">404</td></tr><tr><td align="center">是</td><td align="center">false</td><td align="center">true</td><td align="center">cglib+cglib</td><td align="center">权限生效</td></tr><tr><td align="center">是</td><td align="center">true</td><td align="center">false</td><td align="center">cglib</td><td align="center">权限生效</td></tr><tr><td align="center">是</td><td align="center">true</td><td align="center">true</td><td align="center">cglib</td><td align="center">权限生效</td></tr><tr><td align="center">否</td><td align="center">false</td><td align="center">false</td><td align="center">cglib</td><td align="center">权限生效</td></tr><tr><td align="center">否</td><td align="center">false</td><td align="center">true</td><td align="center">cglib</td><td align="center">权限生效</td></tr><tr><td align="center">否</td><td align="center">true</td><td align="center">false</td><td align="center">无</td><td align="center">权限无效</td></tr><tr><td align="center">否</td><td align="center">true</td><td align="center">true</td><td align="center">无</td><td align="center">权限无效</td></tr></tbody></table><p>最后总结usePrefix，proxyTargetClass解决的问题：</p><ul><li><p>userPrefix属性设为true，阻止了<strong>DefaultAdvisorAutoProxyCreator</strong>代理创建行为。</p></li><li><p>proxyTargetClass为true，使类对象在被二次代理时，仍旧能够找到原始类对象，并且被成功放入映射注册表。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> shiro </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora绑定PicGo图床+Gitee快速上传文件</title>
      <link href="/2020/05/05/Typora%E7%BB%91%E5%AE%9APicGo%E5%9B%BE%E5%BA%8A+Gitee%E5%BF%AB%E9%80%9F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2020/05/05/Typora%E7%BB%91%E5%AE%9APicGo%E5%9B%BE%E5%BA%8A+Gitee%E5%BF%AB%E9%80%9F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="下载Typora"><a href="#下载Typora" class="headerlink" title="下载Typora"></a>下载Typora</h1><p>直接在<a href="https://www.typora.io/" target="_blank" rel="noopener">typora官网</a>选择Download页签下载即可</p><h1 id="PicGo准备"><a href="#PicGo准备" class="headerlink" title="PicGo准备"></a>PicGo准备</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo官方的github地址</a>下载即可，建议选择2.2.0以上版本，支持PicGo-Server配置自定义端口</p><h2 id="Gitee插件"><a href="#Gitee插件" class="headerlink" title="Gitee插件"></a>Gitee插件</h2><p>在插件设置中查找gitee(搜索栏区分大小写)，并安装gitee 搜索到的两个插件</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505214620.png" alt="image-20200505214615638"></p><p>安装完毕重新启动，左侧图床设置中将会加入Gitee图床</p><h1 id="码云仓库准备"><a href="#码云仓库准备" class="headerlink" title="码云仓库准备"></a>码云仓库准备</h1><p>登录码云，新建仓库，如果要于外网访问则选择公开仓库(如果选择私有仓库则在typora软件内部也无法预览)</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505215211.png" alt="image-20200505215209562"></p><p>点击右上角头像选择设置</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505215328.png" alt="image-20200505215327238"></p><p>在安全设置中找到私人令牌，选择生成新令牌，权限勾选projects即可</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505215511.png" alt="image-20200505215509173"></p><h1 id="PicGo-Gitee配置"><a href="#PicGo-Gitee配置" class="headerlink" title="PicGo Gitee配置"></a>PicGo Gitee配置</h1><p>在PicGo Gitee图床设置中填写相关内容</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505215919.png" alt="image-20200505215918872"></p><h1 id="Typora图床配置"><a href="#Typora图床配置" class="headerlink" title="Typora图床配置"></a>Typora图床配置</h1><p>在Typora中点击文件-&gt;偏好设置 选择图片页签(优先使用相对路径的配置比较奇怪，如果粘贴进去的图片是以相对路径展示的并且查找不到，则勾选/取消勾选一下该配置试一试)</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505223808.png" alt="image-20200505220738573"></p><p>点击验证图片上传选项如果成功则代表配置完成</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505221057.png" alt="image-20200505221054787"></p><h1 id="配置结果"><a href="#配置结果" class="headerlink" title="配置结果"></a>配置结果</h1><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505221358.gif" alt="1"></p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="测试上传时报错"><a href="#测试上传时报错" class="headerlink" title="测试上传时报错"></a>测试上传时报错</h2><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505221628.png" alt="image-20200505221626174"></p><p>确认PicGo-Server开启且监听端口为36677</p><p>PicGo设置中选择PicGo-Server(2.2.0版本以上才有)</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505221852.png" alt="image-20200505221851568"></p><h2 id="成功连接PicGo但返回失败"><a href="#成功连接PicGo但返回失败" class="headerlink" title="成功连接PicGo但返回失败"></a>成功连接PicGo但返回失败</h2><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505222002.png" alt="image-20200505222002093"></p><p>这是由于文件名重复，在PicGo设置中开启时间戳重命名功能即可</p><p><img src="https://gitee.com/gonghs/image/raw/master/img/20200505222109.png" alt="image-20200505222108803"></p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
            <tag> picGo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot配置jsp-config的探究</title>
      <link href="/2019/12/06/springboot%E9%85%8D%E7%BD%AEjsp-config%E7%9A%84%E6%8E%A2%E7%A9%B6/"/>
      <url>/2019/12/06/springboot%E9%85%8D%E7%BD%AEjsp-config%E7%9A%84%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="版本概要"><a href="#版本概要" class="headerlink" title="版本概要"></a>版本概要</h1><hr><blockquote><p>springboot 版本 2.2.2.RELEASE<br>jdk 版本 1.8<br>maven 版本 3.6.0<br>idea 版本 2019.1.2 ultimate edition</p></blockquote><hr><h1 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h1><ul><li><p>新建 spring Initializr 项目选择一些基本的依赖即可<br><img src="https://i.loli.net/2019/12/05/9NjezIZxn783urs.png" alt="image.png"></p></li><li><p>在 pom 中追加 jsp 需要的依赖和资源文件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--注意必须要放在此目录下才能被访问到 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建文件夹 webapp 与 resources 文件夹平级,并新建 index.jsp</p><ul><li><p>目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── resources</span><br><span class="line">├── webapp</span><br><span class="line">│   └── WEB-INF</span><br><span class="line">│       ├── index.jsp</span><br></pre></td></tr></table></figure></li><li><p>内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;bool&#125;"</span>&gt;</span>测试c if<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">    hello world 哈哈哈哈哈哈</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 yml 文件中配置访问文件夹</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">mvc:</span></span><br><span class="line">  <span class="attr">view:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">/WEB-INF/jsp/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure></li><li><p>新建访问控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"bool"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="web-xml中的jsp-config标签"><a href="#web-xml中的jsp-config标签" class="headerlink" title="web.xml中的jsp-config标签"></a>web.xml中的jsp-config标签</h1><p>准备工作完成后,项目事实上已经可以成功访问 jsp 页面了,但我们访问时会发现 jsp 页面的中文乱码了,并且c标签也并未生效<br><img src="https://i.loli.net/2019/12/05/od1sm6wkyTZEvKY.png" alt="image.png"><br>在老项目中我们发现 jsp 在 web.xml 文件中存在这么个配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-property-group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-ignored</span>&gt;</span>false<span class="tag">&lt;/<span class="name">el-ignored</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page-encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">page-encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include-prelude</span>&gt;</span>/WEB-INF/tags/taglibs.jspf<span class="tag">&lt;<span class="name">include-prelude</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jsp-property-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>taglibs.jspf文件中包含了一些通用的标签引入</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"fn"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br></pre></td></tr></table></figure><p>这个配置的作用在于为所有的 jsp 页面增加统一的编码,和统一的头部信息,这些配置相当于在 jsp 页面头部加入:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"/WEB-INF/tags/taglibs.jspf"</span> %&gt;</span><br><span class="line">&lt;%@ page pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span>  %&gt;</span><br></pre></td></tr></table></figure><p>我们在index.jsp头部中加入上面那段代码,可以看到乱码解决了标签也生效了<br><img src="https://i.loli.net/2019/12/05/HYBniuxyljbJTGd.png" alt="image.png"><br>在旧项目的改造中,如果我们需要在所有页面追加这个头部,那么工作量就太大了,我们需要找到一种方式使jsp-config的api在springboot中同样生效</p><h1 id="在springboot中配置jsp-config"><a href="#在springboot中配置jsp-config" class="headerlink" title="在springboot中配置jsp-config"></a>在springboot中配置jsp-config</h1><h2 id="外部tomcat启动配置"><a href="#外部tomcat启动配置" class="headerlink" title="外部tomcat启动配置"></a>外部tomcat启动配置</h2><p>springboot本身是支持web.xml的,因此我们可以在WEB-INF下直接放入web.xml其中仅配置jsp-config<br>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jsp-property-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-ignored</span>&gt;</span>false<span class="tag">&lt;/<span class="name">el-ignored</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">page-encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">page-encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include-prelude</span>&gt;</span>/WEB-INF/tags/taglibs.jspf<span class="tag">&lt;/<span class="name">include-prelude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jsp-property-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jsp-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>  我们发现当springboot使用嵌入式容器启动时是忽略web.xml的,因此我们需要配置使用外部tomcat启动</p><h3 id="在idea中配置嵌入式容器启动"><a href="#在idea中配置嵌入式容器启动" class="headerlink" title="在idea中配置嵌入式容器启动"></a>在idea中配置嵌入式容器启动</h3><ul><li><p>修改pom 打包方式改为war包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootJspApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootJspApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(BootJspApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置tomcat启动<br>  <img src="https://i.loli.net/2019/12/06/1zefpF4giRJoskQ.png" alt="image.png"></p></li><li><p>使用tomcat启动web.xml中的内容便生效了</p></li></ul><h2 id="嵌入式容器配置-java-config配置"><a href="#嵌入式容器配置-java-config配置" class="headerlink" title="嵌入式容器配置(java config配置)"></a>嵌入式容器配置(java config配置)</h2><ul><li><p>定制嵌入式容器,在tomcat的容器上下文中我们可以找到Jsp相关的配置类并配置它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableServletWebServerFactory <span class="title">configurableServletWebServerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TomcatServletWebServerFactory() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.postProcessContext(context);</span><br><span class="line">            JspPropertyGroup jspPropertyGroup = <span class="keyword">new</span> JspPropertyGroup();</span><br><span class="line">            jspPropertyGroup.setElIgnored(<span class="string">"false"</span>);</span><br><span class="line">            jspPropertyGroup.addUrlPattern(<span class="string">"*.jsp"</span>);</span><br><span class="line">            jspPropertyGroup.setPageEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">            jspPropertyGroup.addIncludePrelude(<span class="string">"/WEB-INF/tags/taglibs.jspf"</span>);</span><br><span class="line">            JspPropertyGroupDescriptorImpl jspPropertyGroupDescriptor =</span><br><span class="line">                    <span class="keyword">new</span> JspPropertyGroupDescriptorImpl(jspPropertyGroup);</span><br><span class="line">            <span class="comment">// jsp-property-group列表和taglib列表</span></span><br><span class="line">            context.setJspConfigDescriptor(<span class="keyword">new</span> JspConfigDescriptorImpl(Collections.singletonList(jspPropertyGroupDescriptor),</span><br><span class="line">                    Collections.emptyList()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入这个bean以后使用jar包方式重启项目,可以看到这个配置也生效了  </p></li></ul><p><strong>注:除了以上方式外,目前还没有找到更好的方式使用java config使该配置生效,因此使用该配置相当于与tomcat嵌入式容器绑定了(ConfigurableServletWebServerFactory这个bean唯有在tomcat中有jsp的对应配置实现)</strong></p><h2 id="可能的其他方式"><a href="#可能的其他方式" class="headerlink" title="可能的其他方式"></a>可能的其他方式</h2><ul><li><p>在javax.servlet.ServletContext接口中有一个getJspConfigDescriptor方法,这给我们提供了一个修改jsp配置的可能,我们有几种可能的方式获取到ServletContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可能修改的方法</span></span><br><span class="line">servletContext.getJspConfigDescriptor().getJspPropertyGroups().add(<span class="keyword">new</span> JspPropertyGroupDescriptorImpl());</span><br><span class="line"><span class="comment">// 实现ServletContextListener接口</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspConfig</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">      sce.getServletContext();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现ServletContextInitializer接口</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspConfig</span> <span class="keyword">implements</span> <span class="title">ServletContextInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        servletContext.getJspConfigDescriptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两种方式可以获取到servletContext,但在未读取web.xml的情况下,后者获取到的Jsp config描述器为null,而前者则在调用时直接抛出一个异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 实现ServletContainerInitializer接口</span><br><span class="line">@Component</span><br><span class="line">public class JspConfig implements ServletContainerInitializer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onStartup(Set&lt;Class&lt;?&gt;&gt; set, ServletContext servletContext) throws ServletException &#123;</span><br><span class="line">        servletContext.getJspConfigDescriptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方式与前面的第二种方式类似,不同的是此方式仅在程序使用外部tomcat容器启动时才会执行</p></li></ul><h1 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/java-web/tree/master/springboot-jsp" target="_blank" rel="noopener">代码链接</a></h1>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
            <tag> jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot用户上下文注入</title>
      <link href="/2019/08/20/springboot%E7%94%A8%E6%88%B7%E4%B8%8A%E4%B8%8B%E6%96%87%E6%B3%A8%E5%85%A5/"/>
      <url>/2019/08/20/springboot%E7%94%A8%E6%88%B7%E4%B8%8A%E4%B8%8B%E6%96%87%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="版本概要"><a href="#版本概要" class="headerlink" title="版本概要"></a>版本概要</h1><hr><blockquote><p>springboot版本2.1.7.RELEASE<br>kotlin版本1.2.71<br>gradle版本5.2.1<br>idea版本2019.1.2 ultimate edition</p></blockquote><hr><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><ul><li><p>点击file -&gt; new project -&gt;选择spring initializrd点击下一步</p></li><li><p>选择语言,选择项目管理工具<br>  <img src="https://i.loli.net/2019/09/27/hcpGX7TLjZ5kUsb.png" alt="image.png"></p></li><li><p>此篇讨论我们只进行数据模拟,不涉及实际数据,只引入springWebStarter进行请求测试即可</p></li><li><p>选择gradle路径(或者使用默认的),这里我选择本地路径<br>  <img src="https://i.loli.net/2019/09/27/9cBA3UaqRNFPpfH.png" alt="image.png"></p></li><li><p>增加国内镜像地址<br>  追加根节点</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven (url = <span class="string">"http://maven.aliyun.com/nexus/content/groups/public/"</span>)</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>增加fastJson依赖用以序列化<br>  在dependencies中追加</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">"com.alibaba:fastjson:1.2.59"</span>)</span><br></pre></td></tr></table></figure></li><li><p>重新导入等待编译完成</p></li></ul><h1 id="控制器注入"><a href="#控制器注入" class="headerlink" title="控制器注入"></a>控制器注入</h1><p>使用方法解析器,我们能够在控制器中有选择的解析并注入参数</p><ul><li><p>用户上下文对象和标记注解:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">UserContext</span></span>(<span class="keyword">val</span> userId: String, <span class="keyword">val</span> username: String)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(AnnotationTarget.VALUE_PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(AnnotationRetention.RUNTIME)</span></span><br><span class="line"><span class="keyword">annotation</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentUser</span></span></span><br></pre></td></tr></table></figure></li><li><p>配置方法解析器,给加上标记注解的UserContext对象自动解析请求头中的json信息并注入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentUserMethodArgumentResolver</span> : <span class="type">HandlerMethodArgumentResolver &#123;</span></span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 符合条件才进入此参数解析器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">supportsParameter</span><span class="params">(parameter: <span class="type">MethodParameter</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parameter.parameterType.isAssignableFrom(UserContext::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">                &amp;&amp; parameter.hasParameterAnnotation(CurrentUser::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数解析并注入对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resolveArgument</span><span class="params">(parameter: <span class="type">MethodParameter</span>, mavContainer: <span class="type">ModelAndViewContainer</span>?, webRequest: <span class="type">NativeWebRequest</span>, binderFactory: <span class="type">WebDataBinderFactory</span>?)</span></span>: Any? &#123;</span><br><span class="line">        <span class="keyword">val</span> userJson = webRequest.getHeader(<span class="string">"user-test"</span>)</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(userJson, UserContext::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启用方法解析器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> : <span class="type">WebMvcConfigurer &#123;</span></span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加入解析器列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addArgumentResolvers</span><span class="params">(resolvers: <span class="type">MutableList</span>&lt;<span class="type">HandlerMethodArgumentResolver</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.addArgumentResolvers(resolvers)</span><br><span class="line">        resolvers.add(CurrentUserMethodArgumentResolver())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/getArgument"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getArgument</span><span class="params">(<span class="meta">@CurrentUser</span> userContext: <span class="type">UserContext</span>)</span></span>:UserContext &#123;</span><br><span class="line">        <span class="keyword">return</span> userContext</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写WebMvc测试类测试结果</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner::class)</span></span><br><span class="line"><span class="meta">@WebMvcTest(DemoApplication::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebMvcTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>.javaClass)</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mockMvc: MockMvc</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testGetArgument</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> json = <span class="string">"&#123;\"username\":\"测试\", \"userId\":\"测试\"&#125;"</span></span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.<span class="keyword">get</span>(<span class="string">"/getArgument"</span>)</span><br><span class="line">                .header(<span class="string">"user-test"</span>, json))</span><br><span class="line">                .andExpect(status().isOk).andDo &#123; log.info(<span class="string">"返回结果 <span class="subst">$&#123;it.response.contentAsString&#125;</span>"</span>) &#125;.andReturn()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br><img src="https://i.loli.net/2019/09/27/P7qCouQgXO25IkU.png" alt="image.png"></p></li><li><p>使用此方式我们可以很方便在需要时将用户上下文注入控制器中,并且只有需要时,才会进行参数解析</p></li></ul><h1 id="静态方法获取"><a href="#静态方法获取" class="headerlink" title="静态方法获取"></a>静态方法获取</h1><p>使用构造器注入的方式,不方便之处在于当我们在service层需要使用时,只能一层一层的向内传,对我们的方法参数造成的一定程度上的污染,我们可以利用线程安全的ThreadLocal对象在每次请求时存储用户上下文</p><ul><li><p>RequestContext对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> RequestContext &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> userContextThreadLocal: ThreadLocal&lt;UserContext&gt; = ThreadLocal()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setUserContext</span><span class="params">(userContext: <span class="type">UserContext</span>)</span></span> &#123;</span><br><span class="line">        userContextThreadLocal.<span class="keyword">set</span>(userContext)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUserContext</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">        <span class="keyword">return</span> userContextThreadLocal.<span class="keyword">get</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeUserContext</span><span class="params">()</span></span> &#123;</span><br><span class="line">        userContextThreadLocal.remove()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用spring提供的HandlerInterceptor接口我们可以跟踪请求，解析参数，并及时释放本地线程中的对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestInterceptor</span> : <span class="type">HandlerInterceptor &#123;</span></span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果让请求继续执行则返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">preHandle</span><span class="params">(request: <span class="type">HttpServletRequest</span>, response: <span class="type">HttpServletResponse</span>, handler: <span class="type">Any</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> userJson = request.getHeader(<span class="string">"user-test"</span>)</span><br><span class="line">        <span class="keyword">if</span> (userJson.isNullOrBlank()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RequestContext.setUserContext(JSON.parseObject(userJson, UserContext::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求结束时移除上下文，抛出异常也会执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterCompletion</span><span class="params">(request: <span class="type">HttpServletRequest</span>, response: <span class="type">HttpServletResponse</span>, handler: <span class="type">Any</span>, ex: <span class="type">Exception</span>?)</span></span> &#123;</span><br><span class="line">        RequestContext.removeUserContext()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在spring中配置此拦截器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加入拦截器列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addInterceptors</span><span class="params">(registry: <span class="type">InterceptorRegistry</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.addInterceptors(registry)</span><br><span class="line">    registry.addInterceptor(RequestInterceptor())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/getStatic"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStatic</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line"><span class="comment">//        throw RuntimeException("啊偶 出错了")</span></span><br><span class="line">    <span class="keyword">return</span> RequestContext.getUserContext()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testGetStatic</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> json = <span class="string">"&#123;\"username\":\"测试1\", \"userId\":\"测试1\"&#125;"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.<span class="keyword">get</span>(<span class="string">"/getStatic"</span>)</span><br><span class="line">            .header(<span class="string">"user-test"</span>, json))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; log.info(<span class="string">"返回结果 <span class="subst">$&#123;it.response.contentAsString&#125;</span>"</span>) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br><img src="https://i.loli.net/2019/09/27/9pH5MPTWqbS3nL6.png" alt="image.png"></p></li><li><p>由于提供的都是静态方法，使用此方式我们就可以在任何地方使用用户上下文对象(注意避免空指针)，例如，我们就可以使用mybatis拦截器替我们完成userId等属性的注入。</p></li></ul><h1 id="bean获取"><a href="#bean获取" class="headerlink" title="bean获取"></a>bean获取</h1><p>由于静态类不由spring管理，业务类使用时不免使代码的耦合性变强，当我们需要变更方案时将会比较麻烦，因此我们希望将类委托spring进行管理</p><h2 id="方案1-单例bean"><a href="#方案1-单例bean" class="headerlink" title="方案1(单例bean)"></a>方案1(单例bean)</h2><ul><li><p>我们提供一个接口，向外暴露一个getter方法，在getter方法中调用静态方法获取</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserContextManage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUserContext</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">        <span class="keyword">return</span> RequestContext.getUserContext()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置bean</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">userContextManage</span><span class="params">()</span></span>: UserContextManage &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">object</span> : UserContextManage &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> userContextManage: UserContextManage</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/getSingletonBean"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getSingletonBean</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> userContextManage.getUserContext()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testGetSingletonBean</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> json = <span class="string">"&#123;\"username\":\"测试3\", \"userId\":\"测试3\"&#125;"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.<span class="keyword">get</span>(<span class="string">"/getSingletonBean"</span>)</span><br><span class="line">            .header(<span class="string">"user-test"</span>, json))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; log.info(<span class="string">"返回结果 <span class="subst">$&#123;it.response.contentAsString&#125;</span>"</span>) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br><img src="https://i.loli.net/2019/09/28/GBvE9C3Rb5f8MO1.png" alt="image.png"></p></li><li><p>需要额外提及的是，当我们在业务层依赖此对象时，单元测试由于不涉及请求导致用户上下文为空，这里推荐使用mockBean进行测试</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MockBean</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> userContextManage: UserContextManage</span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">before</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Mockito.`<span class="keyword">when</span>`(userContextManage.getUserContext()).thenReturn(UserContext(<span class="string">"mock测试"</span>,<span class="string">"mock测试"</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testMockSingletonBean</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.info(userContextManage.getUserContext().toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mock结果<br><img src="https://i.loli.net/2019/09/28/evKwuSRcCykhZIH.png" alt="image.png"></p></li></ul><h2 id="方案2-请求bean"><a href="#方案2-请求bean" class="headerlink" title="方案2(请求bean)"></a>方案2(请求bean)</h2><p>spring为我们提供了scope为request的bean，例如httpServletRequest就是一个这种bean，这种类型的bean的生命周期和请求是息息相关的，伴随的请求开始和结束进行创建和销毁</p><ul><li><p>声明bean</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(WebApplicationContext.SCOPE_REQUEST)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">userContext</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> RequestContext.getUserContext()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">var</span> userContext: UserContext? = <span class="literal">null</span></span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/getRequestBean"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRequestBean</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> userContext!!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testGetRequestBean</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> json = <span class="string">"&#123;\"username\":\"测试4\", \"userId\":\"测试4\"&#125;"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.<span class="keyword">get</span>(<span class="string">"/getRequestBean"</span>)</span><br><span class="line">            .header(<span class="string">"user-test"</span>, json))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; log.info(<span class="string">"返回结果 <span class="subst">$&#123;it.response.contentAsString&#125;</span>"</span>) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在测试时我们会发现，哪怕我们不要求spring为我们一定要注入这个bean，spring还是会尝试注入并报错<br><img src="https://i.loli.net/2019/09/28/SVj76KGrXnucZ1l.png" alt="image.png"></p></li><li><p>这里有几种方案处理这种异常</p><ul><li><p>方式1 引入javax inject依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation("javax.inject:javax.inject:1")</span><br></pre></td></tr></table></figure></li><li><p>控制器中注入对象使用Provider包装</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> userContext: Provider&lt;UserContext&gt;</span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/getRequestBean"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRequestBean</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> userContext.<span class="keyword">get</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式2 为bean使用代理 注意如果使用kotlin不要使用类代理，否则会丢失字段值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用kotlin需要配置消息转换器(java是否需要还未测试)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">httpMessageConverter</span><span class="params">()</span></span>: HttpMessageConverter&lt;*&gt; &#123;</span><br><span class="line">    <span class="comment">//创建fastJson消息转换器</span></span><br><span class="line">    <span class="keyword">val</span> fastConverter = FastJsonHttpMessageConverter()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//升级最新版本需加=============================================================</span></span><br><span class="line">    <span class="keyword">val</span> supportedMediaTypes = ArrayList&lt;MediaType&gt;()</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_JSON)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_ATOM_XML)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_OCTET_STREAM)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_PDF)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_RSS_XML)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_XHTML_XML)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_XML)</span><br><span class="line">    supportedMediaTypes.add(MediaType.MULTIPART_FORM_DATA)</span><br><span class="line">    supportedMediaTypes.add(MediaType.IMAGE_GIF)</span><br><span class="line">    supportedMediaTypes.add(MediaType.IMAGE_JPEG)</span><br><span class="line">    supportedMediaTypes.add(MediaType.IMAGE_PNG)</span><br><span class="line">    supportedMediaTypes.add(MediaType.TEXT_EVENT_STREAM)</span><br><span class="line">    supportedMediaTypes.add(MediaType.TEXT_HTML)</span><br><span class="line">    supportedMediaTypes.add(MediaType.TEXT_MARKDOWN)</span><br><span class="line">    supportedMediaTypes.add(MediaType.TEXT_PLAIN)</span><br><span class="line">    supportedMediaTypes.add(MediaType.TEXT_XML)</span><br><span class="line">    fastConverter.supportedMediaTypes = supportedMediaTypes</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建配置类</span></span><br><span class="line">    <span class="keyword">val</span> fastJsonConfig = FastJsonConfig()</span><br><span class="line">    <span class="comment">//修改配置返回内容的过滤</span></span><br><span class="line">    <span class="comment">//WriteNullListAsEmpty  ：List字段如果为null,输出为[],而非null</span></span><br><span class="line">    <span class="comment">//WriteNullStringAsEmpty ： 字符类型字段如果为null,输出为"",而非null</span></span><br><span class="line">    <span class="comment">//DisableCircularReferenceDetect ：消除对同一对象循环引用的问题，默认为false（如果不配置有可能会进入死循环）</span></span><br><span class="line">    <span class="comment">//WriteNullBooleanAsFalse：Boolean字段如果为null,输出为false,而非null</span></span><br><span class="line">    <span class="comment">//WriteMapNullValue：是否输出值为null的字段,默认为false</span></span><br><span class="line">    fastJsonConfig.setSerializerFeatures(</span><br><span class="line">            SerializerFeature.DisableCircularReferenceDetect,</span><br><span class="line">            SerializerFeature.WriteMapNullValue,</span><br><span class="line">            SerializerFeature.WriteNullStringAsEmpty,</span><br><span class="line">            SerializerFeature.WriteMapNullValue</span><br><span class="line">    )</span><br><span class="line">    fastConverter.fastJsonConfig = fastJsonConfig</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fastConverter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改用户上下文对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">UserContext</span></span>(<span class="keyword">override</span> <span class="keyword">val</span> userId: String, <span class="keyword">override</span> <span class="keyword">val</span> username: String) : IUserContext</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> userId: String</span><br><span class="line">    <span class="keyword">val</span> username: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口代理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.INTERFACES)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">iUserContext</span><span class="params">()</span></span>: IUserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> RequestContext.getUserContext()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器注入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> userContext: IUserContext</span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/getRequestBean"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRequestBean</span><span class="params">()</span></span>: IUserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> userContext</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>处理之后测试运行结果<br><img src="https://i.loli.net/2019/09/28/QxM3EBGcDRe9Jz7.png" alt="image.png"></li><li>此方式使用将bean委托spring管理，耦合性较低，并且如果使用代理的方式用起来会更加方便，但需要注意的是，由于使用了代理，在请求不涉及用户上下文(即获取用户上下文为空)的情况下调用代理对象将直接抛异常(无法使用==null做空判断)</li></ul><h1 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/kotlin-web/tree/master/kotlin-springboot-user-context-inject" target="_blank" rel="noopener">代码链接</a></h1>]]></content>
      
      
      <categories>
          
          <category> kotlin web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> kotlin </tag>
            
            <tag> web </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot处理集合类型校验</title>
      <link href="/2019/07/25/springboot%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E6%A0%A1%E9%AA%8C/"/>
      <url>/2019/07/25/springboot%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="版本概要"><a href="#版本概要" class="headerlink" title="版本概要"></a>版本概要</h1><hr><blockquote><p>springboot版本2.1.6.RELEASE<br>kotlin版本1.2.71<br>gradle版本5.2.1<br>idea版本2019.1.2 ultimate edition</p></blockquote><hr><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><ul><li><p>点击file -&gt; new project -&gt;选择spring initializrd点击下一步</p></li><li><p>选择语言,选择项目管理工具<br>  <img src="https://i.loli.net/2019/09/28/dufNkUJ6axel3O9.png" alt="image.png"></p></li><li><p>此篇我们讨论只涉及校验,只引入springWebStarter即可</p></li><li><p>选择gradle路径(或者使用默认的),这里我选择本地路径<br>  <img src="https://i.loli.net/2019/09/28/1dLSl6iOIhGC74W.png" alt="image.png"></p></li><li><p>输入项目路径,点击finish,查看项目结构,我们可以看到生成的gradle依赖文件变成了kts后缀的文件,和之前比起来,配置会略有不同</p></li><li><p>增加国内镜像地址<br>  追加根节点</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven (url = <span class="string">"http://maven.aliyun.com/nexus/content/groups/public/"</span>)</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新导入等待编译完成</p></li></ul><h1 id="重现无法校验场景"><a href="#重现无法校验场景" class="headerlink" title="重现无法校验场景"></a>重现无法校验场景</h1><ul><li><p>增加测试控制器和测试类,这里我直接加在了启动类上</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(<span class="meta-string">"/demo"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">demo</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> user: <span class="type">User</span>)</span></span>: User &#123;</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(<span class="meta-string">"/demoList"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">demoList</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> user: <span class="type">List</span>&lt;<span class="type">User</span>&gt;)</span></span>: List&lt;User&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = <span class="meta-string">"用户名不能为空"</span>)</span></span><br><span class="line">    <span class="keyword">val</span> username: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">val</span> password: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    runApplication&lt;DemoApplication&gt;(*args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>增加测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner::class)</span></span><br><span class="line"><span class="meta">@WebMvcTest(DemoApplication::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebMvcTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mockMvc: MockMvc</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> example = <span class="string">"&#123;\"username\":\"\", \"password\":\"111\"&#125;"</span></span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/demo"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_VALUE).content(example))</span><br><span class="line">                .andExpect(status().isOk).andDo &#123; println(it.response.contentAsString) &#125;.andReturn()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testDemoList</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> example = <span class="string">"[&#123;\"username\":\"\", \"password\":\"111\"&#125;]"</span></span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/demoList"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_VALUE).content(example))</span><br><span class="line">                .andExpect(status().isOk).andDo &#123; println(it.response.contentAsString) &#125;.andReturn()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们先执行能够正常执行校验的测试方法testDemo,执行后发现控制台报错,说明参数被校验了<br>  <img src="https://i.loli.net/2019/09/28/sUyxuClac4gPQIV.png" alt="image.png"></p></li><li><p>但执行List时参数却未被校验<br>  <img src="https://i.loli.net/2019/09/28/KDjE8gNXFTesdLv.png" alt="image.png"></p></li></ul><h1 id="处理方案"><a href="#处理方案" class="headerlink" title="处理方案"></a>处理方案</h1><h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1:"></a>方案1:</h2><ul><li><p>新建类包装List,在list上加上@Valid(javax包中)(由于@Validated不支持放在字段上,所以无法使用)注解  </p><ul><li><p>控制器方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(<span class="meta-string">"/demoValidList"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demoValidList</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> user: <span class="type">ValidList</span>&lt;<span class="type">User</span>&gt;)</span></span>: List&lt;User&gt;? &#123;</span><br><span class="line">    <span class="keyword">return</span> user.list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包装类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidList</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">val</span> list: List&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testDemoValidList</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> example = <span class="string">"&#123;\"list\":[&#123;\"username\":\"\", \"password\":\"111\"&#125;]&#125;"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/demoValidList"</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON_VALUE).content(example))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; println(it.response.contentAsString) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  <strong>可以看到此方案需要我们将传输的参数变为对象,多了一层无用的嵌套,并且由于@Valid注解的缺陷,无法使用分组</strong></p><h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2:"></a>方案2:</h2></li><li><p>我们可以采用实现list接口并转接方法的方式,去掉这层无用的嵌套</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidList1</span>&lt;<span class="type">T</span>&gt; : <span class="type">MutableList</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> list.iterator()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">listIterator</span><span class="params">()</span></span>: MutableListIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> list.listIterator()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">listIterator</span><span class="params">(index: <span class="type">Int</span>)</span></span>: MutableListIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> list.listIterator(index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">subList</span><span class="params">(fromIndex: <span class="type">Int</span>, toIndex:<span class="type">Int</span>)</span></span>: MutableList&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> list.subList(fromIndex, toIndex)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.add(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(index: <span class="type">Int</span>, element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.add(index, element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addAll</span><span class="params">(index: <span class="type">Int</span>, elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.addAll(index, elements)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.addAll(elements)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.clear()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.removeAll(elements)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeAt</span><span class="params">(index: <span class="type">Int</span>)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> list.removeAt(index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">retainAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.retainAll(elements)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">set</span><span class="params">(index: <span class="type">Int</span>, element: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> list.<span class="keyword">set</span>(index, element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = list.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">contains</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.contains(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">containsAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.containsAll(elements)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(index: <span class="type">Int</span>)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> list[index]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">indexOf</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.indexOf(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">lastIndexOf</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.lastIndexOf(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">val</span> list: MutableList&lt;T&gt; = mutableListOf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(<span class="meta-string">"/demoValidList1"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demoValidList</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> user: <span class="type">ValidList1</span>&lt;<span class="type">User</span>&gt;)</span></span>: List&lt;User&gt;? &#123;</span><br><span class="line">    <span class="keyword">return</span> user.list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testDemoValidList1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> example = <span class="string">"[&#123;\"username\":\"\", \"password\":\"111\"&#125;]"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/demoValidList1"</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON_VALUE).content(example))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; println(it.response.contentAsString) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用kotlin委托我们可以节省部分代码(注意直接在list上增加@Valid是无效的)</p><ul><li><p>委托器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidList2</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">val</span> list: MutableList&lt;T&gt;) : MutableList&lt;T&gt; <span class="keyword">by</span> list &#123;</span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">var</span> mlist: MutableList&lt;T&gt; = list</span><br><span class="line">    <span class="keyword">constructor</span>() : <span class="keyword">this</span>(mutableListOf())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(<span class="meta-string">"/demoValidList2"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demoValidList2</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> user: <span class="type">ValidList2</span>&lt;<span class="type">User</span>&gt;)</span></span>: List&lt;User&gt;? &#123;</span><br><span class="line">    <span class="keyword">return</span> user.list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testDemoValidList2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> example = <span class="string">"[&#123;\"username\":\"\", \"password\":\"111\"&#125;]"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/demoValidList2"</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON_VALUE).content(example))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; println(it.response.contentAsString) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>如果使用的是java我们也可以利用lombok替我们节省部分代码</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Delegate</span></span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>由于未做异常拦截,以上方案 正常校验,验证器将抛出异常</strong><br><img src="https://i.loli.net/2019/09/28/5ScyJOqR3BCmnVD.png" alt="image.png"><br><strong>方案1和方案2本质上是一致的,缺点在于对于控制器代码的侵入性较大(意味着所有需要校验list的控制器方法都需要修改类为新的包装类)</strong></p><h2 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h2><ul><li><p>我们可以自定义验证器并配置@ControllerAdvice统一为集合增加验证器</p><ul><li><p>自定义验证器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionValidator</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> validatorFactory: LocalValidatorFactoryBean) : Validator &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">supports</span><span class="params">(clazz: <span class="type">Class</span>&lt;*&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collection::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">isAssignableFrom</span></span>(clazz)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验集合 遇到失败即退出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 受校验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errors 错误结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">validate</span><span class="params">(target: <span class="type">Any</span>, errors: <span class="type">Errors</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> collection = target <span class="keyword">as</span> Collection&lt;*&gt;</span><br><span class="line">        <span class="keyword">for</span> (`<span class="keyword">object</span>` <span class="keyword">in</span> collection) &#123;</span><br><span class="line">            `<span class="keyword">object</span>`?.let &#123; ValidationUtils.invokeValidator(validatorFactory, `<span class="keyword">object</span>`, errors) &#125;</span><br><span class="line">            <span class="comment">// 存在错误即退出校验</span></span><br><span class="line">            <span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器拦截</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionValidatorAdvice</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> collectionValidator: CollectionValidator) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在initBinder阶段修改集合类型的校验器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">initBinder</span><span class="params">(binder: <span class="type">WebDataBinder</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 这里必须判断 否则会影响非集合类型校验</span></span><br><span class="line">        <span class="keyword">if</span> (binder.target !<span class="keyword">is</span> Collection&lt;*&gt;) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        binder.addValidators(collectionValidator)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionValidatorConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> localValidatorFactoryBean: LocalValidatorFactoryBean</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">collectionValidator</span><span class="params">()</span></span>: CollectionValidator &#123;</span><br><span class="line">        <span class="keyword">return</span> CollectionValidator(localValidatorFactoryBean)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改测试类,导入配置文件</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner::class)</span></span><br><span class="line"><span class="meta">@WebMvcTest(DemoApplication::class)</span></span><br><span class="line"><span class="meta">@Import(CollectionValidatorConfig::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebMvcTest</span></span></span><br></pre></td></tr></table></figure></li><li><p>再次运行testDemoList此时此方法将受校验  </p></li></ul></li></ul><p><strong>同样由于未做异常拦截,以上方案,验证器将抛出异常</strong><br>    <img src="https://i.loli.net/2019/09/28/gI4nPkjoG5Ja9wW.png" alt="image.png"><br><strong>方案3允许使用分组,对参数不需要做变更,而其缺陷在于如果想要知道是集合的哪条数据出现问题相对而言不太容易</strong></p><h1 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/kotlin-web/tree/master/kotlin-springboot-collection-validation" target="_blank" rel="noopener">代码链接</a></h1>]]></content>
      
      
      <categories>
          
          <category> kotlin web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> kotlin </tag>
            
            <tag> web </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gradle构建springboot项目</title>
      <link href="/2019/03/03/%E4%BD%BF%E7%94%A8gradle%E6%9E%84%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/03/03/%E4%BD%BF%E7%94%A8gradle%E6%9E%84%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="版本概要"><a href="#版本概要" class="headerlink" title="版本概要"></a>版本概要</h1><hr><blockquote><p>springboot版本2.1.3.RELEASE<br>kotlin版本1.3.21<br>gradle版本5.2.1<br>idea版本2018.2.6 ultimate edition</p></blockquote><hr><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><ul><li>点击file -&gt; new project -&gt; 选择新建gradle项目<br>  <img src="https://i.loli.net/2019/09/28/Gi1Rs6D9ILOaTon.png" alt="image.png"></li><li>输入groupId和artifactId 进入下一步</li><li>勾选使用本地gradle路径,选择gradle所在根路径(即bin的上层路径) 进入下一步<br>  <img src="https://i.loli.net/2019/09/28/LETbvJpMadqXxOe.png" alt="image.png"></li><li>选择项目路径 点击finish等待项目构建完成</li></ul><h1 id="引入springboot"><a href="#引入springboot" class="headerlink" title="引入springboot"></a>引入springboot</h1><ul><li><p>修改maven依赖访问地址,使用国内镜像</p><ul><li>在build.gradle中加入  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven&#123;</span><br><span class="line">        url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>引入springboot</p><ul><li><p>在plugins节点中加入</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id &apos;org.springframework.boot&apos; version &apos;2.1.3.RELEASE&apos;</span><br></pre></td></tr></table></figure></li><li><p>加入根节点 使用spingboot插件(即最顶层)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;io.spring.dependency-management&apos;</span><br></pre></td></tr></table></figure></li><li><p>引入springboot web和test依赖 在dependencies节点加入</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;org.springframework.boot:spring-boot-starter-web&apos;</span><br><span class="line">testImplementation &apos;org.springframework.boot:spring-boot-starter-test&apos;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>新建启动类并测试</p><ul><li><p>在java文件夹或kotlin文件夹下创建springboot启动类</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRun</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runApplication&lt;SpringbootRun&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击右侧bootRun尝试启动(注意这里bootRun会自动扫描main方法,如果存在多个main方法只会选择其中一个),或者使用传统方式启动<br>  <img src="https://i.loli.net/2019/09/28/zZRoTUX36k4GOtV.png" alt="image.png"></p></li><li><p>访问localhost:8080查看结果<br>  <img src="https://i.loli.net/2019/09/28/CjK4qsF6AI93bdW.png" alt="image.png"></p></li></ul></li><li><p>打成jar包并运行</p><ul><li>点击右侧build下bootJar<br>  <img src="https://i.loli.net/2019/09/28/ihwdZ64DHVLtAO1.png" alt="image.png"></li><li>项目下build/libs/将会生成一个jar包<br>  <img src="https://i.loli.net/2019/09/28/ZceH7LAsOfXpiNj.png" alt="image.png"></li><li>使用命令行运行,并访问<br>  <img src="https://i.loli.net/2019/09/28/IKtVEFskcBrZLou.png" alt="image.png"></li></ul></li><li><p>打成war包并运行</p><ul><li><p>修改build.gradle 加入根节点</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;war&apos;</span><br></pre></td></tr></table></figure></li><li><p>修改启动类使其继承SpringBootServletInitializer</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRun</span> : <span class="type">SpringBootServletInitializer</span></span>()</span><br></pre></td></tr></table></figure></li><li><p>点击右侧bootWar</p></li><li><p>拷贝war包至tomcat安装路径webapps下</p></li><li><p>运行bin/startup.bat 启动tomcat并尝试访问</p></li><li><p>访问结果<br>  <img src="https://i.loli.net/2019/09/28/yWQzl7G5ikmPTfF.png" alt="image.png"></p></li></ul></li><li><p>打成war包使用jetty运行</p><ul><li><p>修改build.gradle 加入根节点</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configurations &#123;</span><br><span class="line">    compile.exclude module: <span class="string">"spring-boot-starter-tomcat"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入依赖</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;org.springframework.boot:spring-boot-starter-jetty&apos;</span><br></pre></td></tr></table></figure></li><li><p>点击右侧bootWar</p></li><li><p>拷贝war包至jetty安装路径webapps下</p></li><li><p>运行,并访问</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar start.jar</span><br></pre></td></tr></table></figure></li><li><p>访问结果:<br>  <img src="https://i.loli.net/2019/09/28/fTC3hg4ajxNXQqr.png" alt="image.png"><br>  <img src="https://i.loli.net/2019/09/28/FLZB4ayjwv2t8cE.png" alt="image.png"></p></li></ul></li></ul><h1 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/kotlin-web/tree/master/springboot-gradle" target="_blank" rel="noopener">代码链接</a></h1>]]></content>
      
      
      <categories>
          
          <category> kotlin web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> kotlin </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis和redisson分布式锁集成</title>
      <link href="/2019/01/20/redis%E5%92%8Credisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E9%9B%86%E6%88%90/"/>
      <url>/2019/01/20/redis%E5%92%8Credisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="版本概要"><a href="#版本概要" class="headerlink" title="版本概要"></a>版本概要</h1><hr><blockquote><p>springboot版本2.1.2.RELEASE<br>kotlin版本1.3.11 </p></blockquote><h1 id="新建项目请参考"><a href="#新建项目请参考" class="headerlink" title="新建项目请参考"></a><em>新建项目请参考<a href="/2019/01/15/springboot初探和配置文件映射/" title="springboot初探和配置文件映射">springboot初探和配置文件映射</a></em></h1><hr><h1 id="redis集成"><a href="#redis集成" class="headerlink" title="redis集成"></a>redis集成</h1><ul><li><p>新增依赖</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-<span class="keyword">data</span>-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>新增配置项</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    timeout: <span class="number">1000</span>ms</span><br></pre></td></tr></table></figure></li><li><p>配置redisTemplate</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将redisTemplate格式化为string,any格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory redis连接工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redisTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">redisTemplate</span><span class="params">(factory: <span class="type">RedisConnectionFactory</span>)</span></span>:RedisTemplate&lt;String,Any&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> template = RedisTemplate&lt;String,Any&gt;()</span><br><span class="line">        template.setConnectionFactory(factory)</span><br><span class="line">        <span class="keyword">val</span> jackson2JsonRedisSerializer = Jackson2JsonRedisSerializer(Any::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        <span class="keyword">val</span> om = ObjectMapper()</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY)</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL)</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om)</span><br><span class="line">        <span class="keyword">val</span> stringRedisSerializer = StringRedisSerializer()</span><br><span class="line">        template.keySerializer = stringRedisSerializer</span><br><span class="line">        template.hashKeySerializer = stringRedisSerializer</span><br><span class="line">        template.valueSerializer = jackson2JsonRedisSerializer</span><br><span class="line">        template.hashValueSerializer = jackson2JsonRedisSerializer</span><br><span class="line">        template.afterPropertiesSet()</span><br><span class="line">        <span class="keyword">return</span> template</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建测试类,继承生成的测试类,并运行</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> : <span class="type">KotlinSpringbootApplicationTests</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>.javaClass)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> testKey = <span class="keyword">this</span>.javaClass.name</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisTemplate: RedisTemplate&lt;String, Any&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testString</span><span class="params">()</span></span> &#123;</span><br><span class="line">        log.info(<span class="string">"---设置值---"</span>)</span><br><span class="line">        redisTemplate.opsForValue().<span class="keyword">set</span>(testKey, <span class="string">"hello"</span>)</span><br><span class="line">        <span class="keyword">val</span> str = redisTemplate.opsForValue().<span class="keyword">get</span>(testKey) <span class="keyword">as</span>? String</span><br><span class="line">        log.info(<span class="string">"---打印值:<span class="variable">$str</span>---"</span>)</span><br><span class="line">        redisTemplate.delete(testKey)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://i.loli.net/2019/09/28/zNA1sD8uUaVt6FY.png" alt="image.png"></p></li><li><p>尝试进行对象存储</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> username:String, <span class="keyword">val</span> sex:String,<span class="keyword">val</span> phone:<span class="built_in">Long</span>)</span><br><span class="line"><span class="comment">//新增测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testAny</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> user = User(<span class="string">"maple"</span>,<span class="string">"man"</span>,<span class="number">18011111111</span>)</span><br><span class="line">    log.info(<span class="string">"---设置对象---"</span>)</span><br><span class="line">    redisTemplate.opsForValue().<span class="keyword">set</span>(testKey, user)</span><br><span class="line">    <span class="keyword">val</span> user = redisTemplate.opsForValue().<span class="keyword">get</span>(testKey) <span class="keyword">as</span>? User</span><br><span class="line">    log.info(<span class="string">"---打印值:<span class="variable">$user</span>---"</span>)</span><br><span class="line">    redisTemplate.delete(testKey)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://i.loli.net/2019/09/28/REJpaqO7G6bdTHQ.png" alt="image.png"><br>  我们会发现当前的序列化工具对于kotlin对象的序列化并不是那么理想,我们需要重写一个序列化工具</p><h2 id="方式1-使用hessian帮助我们进行序列化"><a href="#方式1-使用hessian帮助我们进行序列化" class="headerlink" title="方式1:使用hessian帮助我们进行序列化"></a>方式1:使用hessian帮助我们进行序列化</h2>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依赖</span></span><br><span class="line">&lt;hessian.vesion&gt;<span class="number">4.0</span><span class="number">.51</span>&lt;/hessian.vesion&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.caucho&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hessian&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;hessian.vesion&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化工具包</span></span><br><span class="line"><span class="keyword">object</span> SerializeUtils&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hessianDeserialize</span><span class="params">(<span class="keyword">by</span>: <span class="type">ByteArray</span>?)</span></span>: Any &#123;</span><br><span class="line">        <span class="keyword">by</span>?: <span class="keyword">throw</span> NullPointerException()</span><br><span class="line">        <span class="keyword">return</span> hessianDeserialize(ByteArrayInputStream(<span class="keyword">by</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hessianDeserialize</span><span class="params">(input:<span class="type">InputStream</span>)</span></span>: Any&#123;</span><br><span class="line">        <span class="keyword">return</span> HessianInput(input).readObject()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hessianSerialize</span><span class="params">(obj: <span class="type">Any</span>?)</span></span>: ByteArray &#123;</span><br><span class="line">        obj?: <span class="keyword">throw</span> NullPointerException()</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> os = ByteArrayOutputStream()</span><br><span class="line">            <span class="keyword">val</span> ho = HessianOutput(os)</span><br><span class="line">            ho.writeObject(obj)</span><br><span class="line">            <span class="keyword">return</span> os.toByteArray()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hessianSerialize</span><span class="params">(obj: <span class="type">Any</span>,<span class="keyword">out</span>:<span class="type">OutputStream</span>)</span></span>&#123;</span><br><span class="line">        HessianOutput(<span class="keyword">out</span>).writeObject(obj)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">javaSerialize</span><span class="params">(obj: <span class="type">Any</span>?)</span></span>:ByteArray&#123;</span><br><span class="line">        obj?: <span class="keyword">throw</span> NullPointerException()</span><br><span class="line">        <span class="keyword">val</span> os = ByteArrayOutputStream()</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">out</span> = ObjectOutputStream(os)</span><br><span class="line">        <span class="keyword">out</span>.writeObject(obj)</span><br><span class="line">        <span class="keyword">return</span> os.toByteArray()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">javaSerialize</span><span class="params">(<span class="keyword">by</span>: <span class="type">ByteArray</span>?)</span></span>:Any&#123;</span><br><span class="line">        <span class="keyword">by</span>?: <span class="keyword">throw</span> NullPointerException()</span><br><span class="line">        <span class="keyword">val</span> `<span class="keyword">is</span>` = ByteArrayInputStream(<span class="keyword">by</span>)</span><br><span class="line">        <span class="keyword">val</span> `<span class="keyword">in</span>` = ObjectInputStream(`<span class="keyword">is</span>`)</span><br><span class="line">        <span class="keyword">return</span> `<span class="keyword">in</span>`.readObject()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建类实现RedisSerializer(对象需要实现序列化)并修改redis配置</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HessianRedisSerializer</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">private</span> <span class="keyword">var</span> clazz: Class&lt;T&gt;) : RedisSerializer&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(t: <span class="type">T</span>?)</span></span>: ByteArray? &#123;</span><br><span class="line">        <span class="keyword">return</span> SerializeUtils.hessianSerialize(t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(bt: <span class="type">ByteArray</span>?)</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span>(bt == <span class="literal">null</span> || bt.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        <span class="meta">@Suppress(<span class="meta-string">"UNCHECKED_CAST"</span>)</span></span><br><span class="line">        <span class="keyword">return</span> SerializeUtils.hessianDeserialize(bt) <span class="keyword">as</span>? T</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//redis配置</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">redisTemplate</span><span class="params">(factory: <span class="type">RedisConnectionFactory</span>)</span></span>:RedisTemplate&lt;String,Any&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> template = RedisTemplate&lt;String,Any&gt;()</span><br><span class="line">    template.setConnectionFactory(factory)</span><br><span class="line">    <span class="keyword">val</span> hessianRedisSerializer = HessianRedisSerializer(Any::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    <span class="keyword">val</span> stringRedisSerializer = StringRedisSerializer()</span><br><span class="line">    template.keySerializer = stringRedisSerializer</span><br><span class="line">    template.hashKeySerializer = stringRedisSerializer</span><br><span class="line">    template.valueSerializer = hessianRedisSerializer</span><br><span class="line">    template.hashValueSerializer = hessianRedisSerializer</span><br><span class="line">    template.afterPropertiesSet()</span><br><span class="line">    <span class="keyword">return</span> template</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改实体类 让实体类实现序列化接口</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> username:String, <span class="keyword">val</span> sex:String,<span class="keyword">val</span> phone:<span class="built_in">Long</span>):Serializable</span><br></pre></td></tr></table></figure></li><li><p>再次测试,存取成功<br>  <img src="https://i.loli.net/2019/09/28/mzYk71wx6yqMgLj.png" alt="image.png"></p><h2 id="方式2-使用java-对象输入输出流实现-对象需要实现序列化-比较慢-不推荐"><a href="#方式2-使用java-对象输入输出流实现-对象需要实现序列化-比较慢-不推荐" class="headerlink" title="方式2,使用java 对象输入输出流实现(对象需要实现序列化) 比较慢 不推荐"></a>方式2,使用java 对象输入输出流实现(对象需要实现序列化) 比较慢 不推荐</h2>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HessianRedisSerializer</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">private</span> <span class="keyword">var</span> clazz: Class&lt;T&gt;) : RedisSerializer&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(t: <span class="type">T</span>?)</span></span>: ByteArray? &#123;</span><br><span class="line">        <span class="keyword">return</span> SerializeUtils.hessianSerialize(t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(bt: <span class="type">ByteArray</span>?)</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span>(bt == <span class="literal">null</span> || bt.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        <span class="meta">@Suppress(<span class="meta-string">"UNCHECKED_CAST"</span>)</span></span><br><span class="line">        <span class="keyword">return</span> SerializeUtils.hessianDeserialize(bt) <span class="keyword">as</span>? T</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="方式3-使用fastjson-对象可以不用实现序列化"><a href="#方式3-使用fastjson-对象可以不用实现序列化" class="headerlink" title="方式3,使用fastjson,对象可以不用实现序列化"></a>方式3,使用fastjson,对象可以不用实现序列化</h2><pre><code><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依赖</span></span><br><span class="line">&lt;fast-json.vesion&gt;<span class="number">1.2</span><span class="number">.54</span>&lt;/fast-json.vesion&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;fast-json.vesion&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"><span class="comment">//序列化类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FastJsonRedisSerializer</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">private</span> <span class="keyword">val</span> clazz:Class&lt;T&gt; ) : RedisSerializer&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> charset = Charset.forName(<span class="string">"utf-8"</span>)!!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(t: <span class="type">T</span>?)</span></span>: ByteArray? &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).toByteArray(charset)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(bt: <span class="type">ByteArray</span>?)</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span>(bt == <span class="literal">null</span> || bt.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        <span class="keyword">val</span> str = String(bt, charset)</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject&lt;T&gt;(str, clazz)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">redisTemplate</span><span class="params">(factory: <span class="type">RedisConnectionFactory</span>)</span></span>:RedisTemplate&lt;String,Any&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> template = RedisTemplate&lt;String,Any&gt;()</span><br><span class="line">    template.setConnectionFactory(factory)</span><br><span class="line">    <span class="keyword">var</span> fastJsonRedisSerializer = FastJsonRedisSerializer(Any::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    <span class="comment">//配置白名单</span></span><br><span class="line">    ParserConfig.getGlobalInstance().addAccept(<span class="string">"com.maple.kotlinspringboot.entity.User"</span>)</span><br><span class="line">    <span class="comment">//或者直接关闭这个检测</span></span><br><span class="line">    <span class="comment">//ParserConfig.getGlobalInstance().isAutoTypeSupport = true</span></span><br><span class="line">    <span class="keyword">val</span> stringRedisSerializer = StringRedisSerializer()</span><br><span class="line">    template.keySerializer = stringRedisSerializer</span><br><span class="line">    template.hashKeySerializer = stringRedisSerializer</span><br><span class="line">    template.valueSerializer = fastJsonRedisSerializer</span><br><span class="line">    template.hashValueSerializer = fastJsonRedisSerializer</span><br><span class="line">    template.afterPropertiesSet()</span><br><span class="line">    <span class="keyword">return</span> template</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li>做一个简单的redis工具包  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisTemplate: RedisTemplate&lt;String, Any&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定缓存对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> any 值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Any&gt;</span> <span class="title">getT</span><span class="params">(key: <span class="type">String</span>)</span></span>:T? &#123;</span><br><span class="line">        <span class="meta">@Suppress(<span class="meta-string">"UNCHECKED_CAST"</span>)</span></span><br><span class="line">        <span class="keyword">return</span>  redisTemplate.opsForValue().<span class="keyword">get</span>(key) <span class="keyword">as</span>? T</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取long值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> any 值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getLong</span><span class="params">(key: <span class="type">String</span>)</span></span>:<span class="built_in">Long</span>?&#123;</span><br><span class="line">        <span class="keyword">val</span> value = getAny(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span>(value)&#123;</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Byte</span> -&gt; value.toLong()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; value.toLong()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; value</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Float</span> -&gt; value.toLong()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Double</span> -&gt; value.toLong()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Char</span> -&gt; value.toLong()</span><br><span class="line">            <span class="keyword">is</span> String -&gt; value.toLongOrNull()</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取int值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> any 值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getInt</span><span class="params">(key: <span class="type">String</span>)</span></span>:<span class="built_in">Int</span>?&#123;</span><br><span class="line">        <span class="keyword">val</span> value = getAny(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span>(value)&#123;</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Byte</span> -&gt; value.toInt()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; value</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; value.toInt()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Float</span> -&gt; value.toInt()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Double</span> -&gt; value.toInt()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Char</span> -&gt; value.toInt()</span><br><span class="line">            <span class="keyword">is</span> String -&gt; value.toIntOrNull()</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入普通缓存对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setAny</span><span class="params">(key:<span class="type">String</span>,value:<span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().<span class="keyword">set</span>(key,value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除普通缓存对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(key:<span class="type">String</span>)</span></span>:<span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取普通缓存对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> any 值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAny</span><span class="params">(key: <span class="type">String</span>)</span></span>:Any? &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().<span class="keyword">get</span>(key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="redisson集成"><a href="#redisson集成" class="headerlink" title="redisson集成"></a>redisson集成</h1><ul><li><p>引入依赖</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;redisson.version&gt;<span class="number">3.10</span><span class="number">.0</span>&lt;/redisson.version&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;redisson.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置bean</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> redisProperties: RedisProperties</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">redisClient</span><span class="params">()</span></span>: RedissonClient &#123;</span><br><span class="line">    <span class="keyword">val</span> serverConfig = Config().apply &#123;</span><br><span class="line">        <span class="keyword">this</span>.useSingleServer()</span><br><span class="line">                .setAddress(<span class="string">"redis://<span class="subst">$&#123;redisProperties.host&#125;</span>:<span class="subst">$&#123;redisProperties.port&#125;</span>"</span>).timeout = (redisProperties.timeout.seconds * <span class="number">1000</span>).toInt()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Redisson.create(serverConfig)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisLockTest</span> : <span class="type">BaseTest</span></span>()&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>.javaClass)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> testRedisKey = <span class="keyword">this</span>.javaClass.name</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> lockKey = <span class="string">"testLockKey"</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisUtils: RedisUtils</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisClient: RedissonClient</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        log.info(<span class="string">"----------before-----------"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">tearDown</span><span class="params">()</span></span> &#123;</span><br><span class="line">        log.info(<span class="string">"----------after-----------"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisUtils.setAny(testRedisKey,<span class="number">100</span>)</span><br><span class="line">        println(redisUtils.getInt(testRedisKey))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">val</span> lock:RLock = redisClient.getLock(lockKey)</span><br><span class="line">        println(<span class="string">"---尝试上锁---"</span>)</span><br><span class="line">        lock.tryLock(<span class="number">20</span>, TimeUnit.SECONDS)</span><br><span class="line">        println(<span class="string">"---进入循环---"</span>)</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">val</span> stock = redisUtils.getInt(testRedisKey)</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">            <span class="keyword">if</span>(stock!! &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                redisUtils.setAny(testRedisKey, value = stock-<span class="number">1</span>)</span><br><span class="line">                println(<span class="string">"stock: <span class="variable">$stock</span>-1"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lock.unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>先执行一次设值,再同时运行两次测试类,我们希望达到的效果是,当第一个执行完循环时,第二个才开始进入循环,可以看到,最终结果确如我们所愿<br>  <img src="https://i.loli.net/2019/09/28/2ALRvEJkh67pPsn.gif" alt="redis-lock.gif"></p></li></ul><h1 id="注解获取缓存对象"><a href="#注解获取缓存对象" class="headerlink" title="注解获取缓存对象"></a>注解获取缓存对象</h1><ul><li><p>不论我们使用shiro,还是security或是其他的框架做项目的权限控制,我们可能需要将用户存入缓存中,这里我使用注解获取缓存中的用户对象</p></li><li><p>新建一个注解类</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(AnnotationTarget.VALUE_PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(AnnotationRetention.RUNTIME)</span></span><br><span class="line"><span class="keyword">annotation</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentUser</span></span></span><br></pre></td></tr></table></figure></li><li><p>新建一个方法解析器</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentUserMethodArgumentResolver</span>:<span class="type">HandlerMethodArgumentResolver&#123;</span></span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisUtils: RedisUtils</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">supportsParameter</span><span class="params">(parameter: <span class="type">MethodParameter</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parameter.parameterType.isAssignableFrom(User::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">                &amp;&amp; parameter.hasParameterAnnotation(CurrentUser::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resolveArgument</span><span class="params">(parameter: <span class="type">MethodParameter</span>, mavContainer: <span class="type">ModelAndViewContainer</span>?, webRequest: <span class="type">NativeWebRequest</span>, binderFactory: <span class="type">WebDataBinderFactory</span>?)</span></span>: Any? &#123;</span><br><span class="line">        <span class="keyword">return</span> redisUtils.getT&lt;User&gt;(<span class="string">"currentUser"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改spring配置</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> : <span class="type">WebMvcConfigurer &#123;</span></span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> currentUserResolver: CurrentUserMethodArgumentResolver</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addViewControllers</span><span class="params">(registry: <span class="type">ViewControllerRegistry</span>)</span></span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"forward:/hello"</span>)</span><br><span class="line">        registry.setOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addArgumentResolvers</span><span class="params">(resolvers: <span class="type">MutableList</span>&lt;<span class="type">HandlerMethodArgumentResolver</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.addArgumentResolvers(resolvers)</span><br><span class="line">        resolvers.add(currentUserResolver)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改控制层</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisUtils: RedisUtils</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">(<span class="meta">@CurrentUser</span> user:<span class="type">User</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/testLogin"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testLogin</span><span class="params">(user:<span class="type">User</span>)</span></span>: String &#123;</span><br><span class="line">        redisUtils.setAny(<span class="string">"currentUser"</span>,user)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>依次运行<br><a href="http://localhost:9001/testLogin?username=me&amp;sex=man&amp;phone=1000" target="_blank" rel="noopener">http://localhost:9001/testLogin?username=me&amp;sex=man&amp;phone=1000</a><br><a href="http://localhost:9001/hello" target="_blank" rel="noopener">http://localhost:9001/hello</a><br>可以看到我们成功取到了这个对象<br>  <img src="https://i.loli.net/2019/09/28/UdMj8DkoYxl4fcr.png" alt="image.png"> </p></li></ul><h1 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/kotlin-web/tree/master/kotlin-springboot-redis" target="_blank" rel="noopener">代码链接</a></h1><p><a href="#top">回到顶部</a></p>]]></content>
      
      
      <categories>
          
          <category> kotlin web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> kotlin </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot初探和配置文件映射</title>
      <link href="/2019/01/15/springboot%E5%88%9D%E6%8E%A2%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84/"/>
      <url>/2019/01/15/springboot%E5%88%9D%E6%8E%A2%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="版本概要"><a href="#版本概要" class="headerlink" title="版本概要"></a>版本概要</h1><hr><blockquote><p>springboot版本2.1.2.RELEASE<br>kotlin版本1.3.11</p></blockquote><hr><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><ul><li><p>选择Spring Initializr</p></li><li><p>在metadata页面中选择kotlin作为语言<br>  <img src="https://i.loli.net/2019/09/28/fR5BJe9FXrNvMhb.png" alt="image.png"></p></li><li><p>依赖勾选web<br>  <img src="https://i.loli.net/2019/09/28/vObIGPTYgKLFSfh.png" alt="image.png"></p></li><li><p>将kotlin文件夹设为项目资源文件夹,并等待项目依赖下载完毕<br>  <img src="https://i.loli.net/2019/09/28/3X7mJgEG4kpZLhb.png" alt="image.png"></p></li><li><p>新建测试控制器并设置/hello为默认映射路径</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> : <span class="type">WebMvcConfigurer &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addViewControllers</span><span class="params">(registry: <span class="type">ViewControllerRegistry</span>)</span></span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"forward:/hello"</span>)</span><br><span class="line">        registry.setOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目访问页面<br>  <img src="https://i.loli.net/2019/09/28/m1hQnBGlIpAaYi6.png" alt="image.png"></p></li></ul><h1 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h1><ul><li><p>新建配置文件test.yml,并添加几个值(如果需要yml配置文件的提示可以安装spring assistant插件,或者点项目配置将其加入配置列表)<br>  <img src="https://i.loli.net/2019/09/28/WLBMZfFOdqnXYeK.png" alt="image.png"></p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">  name: maple</span><br><span class="line">  sex: man</span><br><span class="line">  phone: <span class="number">18111111111</span></span><br><span class="line">  children: &#123;name: merry,sex: woman&#125;</span><br><span class="line">  lists:</span><br><span class="line">    - <span class="number">1</span></span><br><span class="line">    - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要使用传统properties配置需要引入依赖</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改控制器为属性注入值,注意由于kotlin字符串中的$本身有其含义,因此需要加反斜杠转义</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(<span class="meta-string">"\$&#123;person.name&#125;"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> username:String</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello <span class="variable">$username</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问项目<br>  <img src="https://i.loli.net/2019/09/28/flnDexAr8PJUNoi.png" alt="image.png"></p></li><li><p>实体映射,由于默认的工厂对自定义yml解析有问题,新建映射工厂类解析yml,新建实体并修改控制器(如果需要使用kotlin中的data类型 需要手动注bean)</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YamlPropertySourceFactory</span> : <span class="type">PropertySourceFactory &#123;</span></span></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createPropertySource</span><span class="params">(name: <span class="type">String</span>?, resource: <span class="type">EncodedResource</span>)</span></span>: PropertySource&lt;*&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (name != <span class="literal">null</span>)</span><br><span class="line">            YamlPropertySourceLoader().load(name, resource.resource)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            YamlPropertySourceLoader().load(</span><br><span class="line">                getNameForResource(resource.resource), resource.resource)[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getNameForResource</span><span class="params">(resource: <span class="type">Resource</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">var</span> name = resource.getDescription()</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class="line">            name = resource::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">getSimpleName</span></span>() + <span class="string">"@"</span> + System.identityHashCode(resource)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//映射类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = <span class="meta-string">"person"</span>)</span></span><br><span class="line"><span class="meta">@PropertySource(<span class="meta-string">"classpath:/test.yml"</span>,factory = YamlPropertySourceFactory::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> name: String</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> sex: String</span><br><span class="line">    <span class="keyword">var</span> phone = <span class="number">0L</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> children: Map&lt;String,String&gt;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> lists: List&lt;String&gt;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>:String&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name:<span class="variable">$name</span>,sex:<span class="variable">$sex</span>,phone:<span class="variable">$phone</span>,children:<span class="variable">$children</span>,lists:<span class="variable">$lists</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改 controller</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> userProperties:UserProperties</span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> userProperties.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试<br>  <img src="https://i.loli.net/2019/09/28/3oMwdXUGt5B1gPZ.png" alt="image.png"></p></li><li><p>另:使用kotlin data class类型注入(对于map类型的属性暂时没有找到特别好的办法解决)</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改映射类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(<span class="meta-string">"classpath:/test.yml"</span>,factory = YamlPropertySourceFactory::class)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProperties</span></span>(<span class="meta">@Value(<span class="meta-string">"\$&#123;person.name&#125;"</span>)</span><span class="keyword">val</span> name:String, <span class="meta">@Value(<span class="meta-string">"\$&#123;person.sex&#125;"</span>)</span><span class="keyword">val</span> sex:String, <span class="meta">@Value(<span class="meta-string">"\&#123;person.phone&#125;"</span>)</span><span class="keyword">val</span> phone:<span class="built_in">Long</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注,由于@value注解本身对于list map的支持并非很友好 因此并不推荐</span></span><br><span class="line"><span class="comment">//配置list</span></span><br><span class="line">list: <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="comment">//取值注入</span></span><br><span class="line"><span class="meta">@Value(<span class="meta-string">"#&#123;'\$&#123;person.lists&#125;'.split(',')&#125;"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> lists:List&lt;String&gt;</span><br><span class="line"><span class="comment">//或者激活支持转换String为Collection类型的新配置服务</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">conversionService</span><span class="params">()</span></span>: ConversionService&#123;</span><br><span class="line">    <span class="keyword">return</span> DefaultConversionService()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这时list将不用再特殊处理 但配置仍旧只能保持字符串形式</span></span><br><span class="line"><span class="meta">@Value(<span class="meta-string">"\$&#123;person.lists&#125;"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> lists:List&lt;String&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/kotlin-web" target="_blank" rel="noopener">代码链接</a></h1>]]></content>
      
      
      <categories>
          
          <category> kotlin web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> kotlin </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
