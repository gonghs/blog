<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springboot用户上下文注入</title>
      <link href="/2019/08/20/springboot%E7%94%A8%E6%88%B7%E4%B8%8A%E4%B8%8B%E6%96%87%E6%B3%A8%E5%85%A5/"/>
      <url>/2019/08/20/springboot%E7%94%A8%E6%88%B7%E4%B8%8A%E4%B8%8B%E6%96%87%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="用户上下文注入"><a href="#用户上下文注入" class="headerlink" title="用户上下文注入"></a>用户上下文注入</h3><hr><blockquote><p>本文所用相关版本:<br>springboot版本2.1.7.RELEASE<br>kotlin版本1.2.71<br>gradle版本5.2.1<br>idea版本2019.1.2 ultimate edition</p></blockquote><hr><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><ul><li><p>点击file -&gt; new project -&gt;选择spring initializrd点击下一步</p></li><li><p>选择语言,选择项目管理工具<br>  <img src="https://i.loli.net/2019/09/27/hcpGX7TLjZ5kUsb.png" alt="image.png"></p></li><li><p>此篇讨论我们只进行数据模拟,不涉及实际数据,只引入springWebStarter进行请求测试即可</p></li><li><p>选择gradle路径(或者使用默认的),这里我选择本地路径<br>  <img src="https://i.loli.net/2019/09/27/9cBA3UaqRNFPpfH.png" alt="image.png"></p></li><li><p>增加国内镜像地址<br>  追加根节点</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven (url = <span class="string">"http://maven.aliyun.com/nexus/content/groups/public/"</span>)</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>增加fastJson依赖用以序列化<br>  在dependencies中追加</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">"com.alibaba:fastjson:1.2.59"</span>)</span><br></pre></td></tr></table></figure></li><li><p>重新导入等待编译完成</p></li></ul><h4 id="控制器注入"><a href="#控制器注入" class="headerlink" title="控制器注入"></a>控制器注入</h4><p>使用方法解析器,我们能够在控制器中有选择的解析并注入参数</p><ul><li><p>用户上下文对象和标记注解:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">UserContext</span></span>(<span class="keyword">val</span> userId: String, <span class="keyword">val</span> username: String)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(AnnotationTarget.VALUE_PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(AnnotationRetention.RUNTIME)</span></span><br><span class="line"><span class="keyword">annotation</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentUser</span></span></span><br></pre></td></tr></table></figure></li><li><p>配置方法解析器,给加上标记注解的UserContext对象自动解析请求头中的json信息并注入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentUserMethodArgumentResolver</span> : <span class="type">HandlerMethodArgumentResolver &#123;</span></span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 符合条件才进入此参数解析器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">supportsParameter</span><span class="params">(parameter: <span class="type">MethodParameter</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parameter.parameterType.isAssignableFrom(UserContext::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">                &amp;&amp; parameter.hasParameterAnnotation(CurrentUser::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数解析并注入对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resolveArgument</span><span class="params">(parameter: <span class="type">MethodParameter</span>, mavContainer: <span class="type">ModelAndViewContainer</span>?, webRequest: <span class="type">NativeWebRequest</span>, binderFactory: <span class="type">WebDataBinderFactory</span>?)</span></span>: Any? &#123;</span><br><span class="line">        <span class="keyword">val</span> userJson = webRequest.getHeader(<span class="string">"user-test"</span>)</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(userJson, UserContext::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启用方法解析器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> : <span class="type">WebMvcConfigurer &#123;</span></span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加入解析器列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addArgumentResolvers</span><span class="params">(resolvers: <span class="type">MutableList</span>&lt;<span class="type">HandlerMethodArgumentResolver</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.addArgumentResolvers(resolvers)</span><br><span class="line">        resolvers.add(CurrentUserMethodArgumentResolver())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/getArgument"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getArgument</span><span class="params">(<span class="meta">@CurrentUser</span> userContext: <span class="type">UserContext</span>)</span></span>:UserContext &#123;</span><br><span class="line">        <span class="keyword">return</span> userContext</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写WebMvc测试类测试结果</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner::class)</span></span><br><span class="line"><span class="meta">@WebMvcTest(DemoApplication::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebMvcTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>.javaClass)</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mockMvc: MockMvc</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testGetArgument</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> json = <span class="string">"&#123;\"username\":\"测试\", \"userId\":\"测试\"&#125;"</span></span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.<span class="keyword">get</span>(<span class="string">"/getArgument"</span>)</span><br><span class="line">                .header(<span class="string">"user-test"</span>, json))</span><br><span class="line">                .andExpect(status().isOk).andDo &#123; log.info(<span class="string">"返回结果 <span class="subst">$&#123;it.response.contentAsString&#125;</span>"</span>) &#125;.andReturn()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br><img src="https://i.loli.net/2019/09/27/P7qCouQgXO25IkU.png" alt="image.png"></p></li><li><p>使用此方式我们可以很方便在需要时将用户上下文注入控制器中,并且只有需要时,才会进行参数解析</p></li></ul><h4 id="静态方法获取"><a href="#静态方法获取" class="headerlink" title="静态方法获取"></a>静态方法获取</h4><p>使用构造器注入的方式,不方便之处在于当我们在service层需要使用时,只能一层一层的向内传,对我们的方法参数造成的一定程度上的污染,我们可以利用线程安全的ThreadLocal对象在每次请求时存储用户上下文</p><ul><li><p>RequestContext对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> RequestContext &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> userContextThreadLocal: ThreadLocal&lt;UserContext&gt; = ThreadLocal()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setUserContext</span><span class="params">(userContext: <span class="type">UserContext</span>)</span></span> &#123;</span><br><span class="line">        userContextThreadLocal.<span class="keyword">set</span>(userContext)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUserContext</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">        <span class="keyword">return</span> userContextThreadLocal.<span class="keyword">get</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeUserContext</span><span class="params">()</span></span> &#123;</span><br><span class="line">        userContextThreadLocal.remove()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用spring提供的HandlerInterceptor接口我们可以跟踪请求，解析参数，并及时释放本地线程中的对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestInterceptor</span> : <span class="type">HandlerInterceptor &#123;</span></span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果让请求继续执行则返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">preHandle</span><span class="params">(request: <span class="type">HttpServletRequest</span>, response: <span class="type">HttpServletResponse</span>, handler: <span class="type">Any</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> userJson = request.getHeader(<span class="string">"user-test"</span>)</span><br><span class="line">        <span class="keyword">if</span> (userJson.isNullOrBlank()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RequestContext.setUserContext(JSON.parseObject(userJson, UserContext::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求结束时移除上下文，抛出异常也会执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterCompletion</span><span class="params">(request: <span class="type">HttpServletRequest</span>, response: <span class="type">HttpServletResponse</span>, handler: <span class="type">Any</span>, ex: <span class="type">Exception</span>?)</span></span> &#123;</span><br><span class="line">        RequestContext.removeUserContext()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在spring中配置此拦截器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加入拦截器列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addInterceptors</span><span class="params">(registry: <span class="type">InterceptorRegistry</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.addInterceptors(registry)</span><br><span class="line">    registry.addInterceptor(RequestInterceptor())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/getStatic"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStatic</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line"><span class="comment">//        throw RuntimeException("啊偶 出错了")</span></span><br><span class="line">    <span class="keyword">return</span> RequestContext.getUserContext()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testGetStatic</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> json = <span class="string">"&#123;\"username\":\"测试1\", \"userId\":\"测试1\"&#125;"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.<span class="keyword">get</span>(<span class="string">"/getStatic"</span>)</span><br><span class="line">            .header(<span class="string">"user-test"</span>, json))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; log.info(<span class="string">"返回结果 <span class="subst">$&#123;it.response.contentAsString&#125;</span>"</span>) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br><img src="https://i.loli.net/2019/09/27/9pH5MPTWqbS3nL6.png" alt="image.png"></p></li><li><p>由于提供的都是静态方法，使用此方式我们就可以在任何地方使用用户上下文对象(注意避免空指针)，例如，我们就可以使用mybatis拦截器替我们完成userId等属性的注入。</p></li></ul><h4 id="bean获取"><a href="#bean获取" class="headerlink" title="bean获取"></a>bean获取</h4><p>由于静态类不由spring管理，业务类使用时不免使代码的耦合性变强，当我们需要变更方案时将会比较麻烦，因此我们希望将类委托spring进行管理</p><h5 id="方案1-单例bean"><a href="#方案1-单例bean" class="headerlink" title="方案1(单例bean)"></a>方案1(单例bean)</h5><ul><li><p>我们提供一个接口，向外暴露一个getter方法，在getter方法中调用静态方法获取</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserContextManage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUserContext</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">        <span class="keyword">return</span> RequestContext.getUserContext()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置bean</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">userContextManage</span><span class="params">()</span></span>: UserContextManage &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">object</span> : UserContextManage &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> userContextManage: UserContextManage</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/getSingletonBean"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getSingletonBean</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> userContextManage.getUserContext()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testGetSingletonBean</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> json = <span class="string">"&#123;\"username\":\"测试3\", \"userId\":\"测试3\"&#125;"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.<span class="keyword">get</span>(<span class="string">"/getSingletonBean"</span>)</span><br><span class="line">            .header(<span class="string">"user-test"</span>, json))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; log.info(<span class="string">"返回结果 <span class="subst">$&#123;it.response.contentAsString&#125;</span>"</span>) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br><img src="https://i.loli.net/2019/09/28/GBvE9C3Rb5f8MO1.png" alt="image.png"></p></li><li><p>需要额外提及的是，当我们在业务层依赖此对象时，单元测试由于不涉及请求导致用户上下文为空，这里推荐使用mockBean进行测试</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MockBean</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> userContextManage: UserContextManage</span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">before</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Mockito.`<span class="keyword">when</span>`(userContextManage.getUserContext()).thenReturn(UserContext(<span class="string">"mock测试"</span>,<span class="string">"mock测试"</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testMockSingletonBean</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.info(userContextManage.getUserContext().toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mock结果<br><img src="https://i.loli.net/2019/09/28/evKwuSRcCykhZIH.png" alt="image.png"></p></li></ul><h5 id="方案2-请求bean"><a href="#方案2-请求bean" class="headerlink" title="方案2(请求bean)"></a>方案2(请求bean)</h5><p>spring为我们提供了scope为request的bean，例如httpServletRequest就是一个这种bean，这种类型的bean的生命周期和请求是息息相关的，伴随的请求开始和结束进行创建和销毁</p><ul><li><p>声明bean</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(WebApplicationContext.SCOPE_REQUEST)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">userContext</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> RequestContext.getUserContext()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">var</span> userContext: UserContext? = <span class="literal">null</span></span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/getRequestBean"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRequestBean</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> userContext!!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testGetRequestBean</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> json = <span class="string">"&#123;\"username\":\"测试4\", \"userId\":\"测试4\"&#125;"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.<span class="keyword">get</span>(<span class="string">"/getRequestBean"</span>)</span><br><span class="line">            .header(<span class="string">"user-test"</span>, json))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; log.info(<span class="string">"返回结果 <span class="subst">$&#123;it.response.contentAsString&#125;</span>"</span>) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在测试时我们会发现，哪怕我们不要求spring为我们一定要注入这个bean，spring还是会尝试注入并报错<br><img src="https://i.loli.net/2019/09/28/SVj76KGrXnucZ1l.png" alt="image.png"></p></li><li><p>这里有几种方案处理这种异常</p><ul><li><p>方式1 引入javax inject依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation("javax.inject:javax.inject:1")</span><br></pre></td></tr></table></figure></li><li><p>控制器中注入对象使用Provider包装</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> userContext: Provider&lt;UserContext&gt;</span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/getRequestBean"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRequestBean</span><span class="params">()</span></span>: UserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> userContext.<span class="keyword">get</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式2 为bean使用代理 注意如果使用kotlin不要使用类代理，否则会丢失字段值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用kotlin需要配置消息转换器(java是否需要还未测试)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">httpMessageConverter</span><span class="params">()</span></span>: HttpMessageConverter&lt;*&gt; &#123;</span><br><span class="line">    <span class="comment">//创建fastJson消息转换器</span></span><br><span class="line">    <span class="keyword">val</span> fastConverter = FastJsonHttpMessageConverter()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//升级最新版本需加=============================================================</span></span><br><span class="line">    <span class="keyword">val</span> supportedMediaTypes = ArrayList&lt;MediaType&gt;()</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_JSON)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_ATOM_XML)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_OCTET_STREAM)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_PDF)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_RSS_XML)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_XHTML_XML)</span><br><span class="line">    supportedMediaTypes.add(MediaType.APPLICATION_XML)</span><br><span class="line">    supportedMediaTypes.add(MediaType.MULTIPART_FORM_DATA)</span><br><span class="line">    supportedMediaTypes.add(MediaType.IMAGE_GIF)</span><br><span class="line">    supportedMediaTypes.add(MediaType.IMAGE_JPEG)</span><br><span class="line">    supportedMediaTypes.add(MediaType.IMAGE_PNG)</span><br><span class="line">    supportedMediaTypes.add(MediaType.TEXT_EVENT_STREAM)</span><br><span class="line">    supportedMediaTypes.add(MediaType.TEXT_HTML)</span><br><span class="line">    supportedMediaTypes.add(MediaType.TEXT_MARKDOWN)</span><br><span class="line">    supportedMediaTypes.add(MediaType.TEXT_PLAIN)</span><br><span class="line">    supportedMediaTypes.add(MediaType.TEXT_XML)</span><br><span class="line">    fastConverter.supportedMediaTypes = supportedMediaTypes</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建配置类</span></span><br><span class="line">    <span class="keyword">val</span> fastJsonConfig = FastJsonConfig()</span><br><span class="line">    <span class="comment">//修改配置返回内容的过滤</span></span><br><span class="line">    <span class="comment">//WriteNullListAsEmpty  ：List字段如果为null,输出为[],而非null</span></span><br><span class="line">    <span class="comment">//WriteNullStringAsEmpty ： 字符类型字段如果为null,输出为"",而非null</span></span><br><span class="line">    <span class="comment">//DisableCircularReferenceDetect ：消除对同一对象循环引用的问题，默认为false（如果不配置有可能会进入死循环）</span></span><br><span class="line">    <span class="comment">//WriteNullBooleanAsFalse：Boolean字段如果为null,输出为false,而非null</span></span><br><span class="line">    <span class="comment">//WriteMapNullValue：是否输出值为null的字段,默认为false</span></span><br><span class="line">    fastJsonConfig.setSerializerFeatures(</span><br><span class="line">            SerializerFeature.DisableCircularReferenceDetect,</span><br><span class="line">            SerializerFeature.WriteMapNullValue,</span><br><span class="line">            SerializerFeature.WriteNullStringAsEmpty,</span><br><span class="line">            SerializerFeature.WriteMapNullValue</span><br><span class="line">    )</span><br><span class="line">    fastConverter.fastJsonConfig = fastJsonConfig</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fastConverter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改用户上下文对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">UserContext</span></span>(<span class="keyword">override</span> <span class="keyword">val</span> userId: String, <span class="keyword">override</span> <span class="keyword">val</span> username: String) : IUserContext</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> userId: String</span><br><span class="line">    <span class="keyword">val</span> username: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口代理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.INTERFACES)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">iUserContext</span><span class="params">()</span></span>: IUserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> RequestContext.getUserContext()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器注入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> userContext: IUserContext</span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/getRequestBean"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRequestBean</span><span class="params">()</span></span>: IUserContext &#123;</span><br><span class="line">    <span class="keyword">return</span> userContext</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>处理之后测试运行结果<br><img src="https://i.loli.net/2019/09/28/QxM3EBGcDRe9Jz7.png" alt="image.png"></li><li>此方式使用将bean委托spring管理，耦合性较低，并且如果使用代理的方式用起来会更加方便，但需要注意的是，由于使用了代理，在请求不涉及用户上下文(即获取用户上下文为空)的情况下调用代理对象将直接抛异常(无法使用==null做空判断)</li></ul><h4 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/kotlin-web/tree/master/kotlin-springboot-user-context-inject" target="_blank" rel="noopener">代码链接</a></h4>]]></content>
      
      
      <categories>
          
          <category> kotlin web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> kotlin </tag>
            
            <tag> web </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot处理集合类型校验</title>
      <link href="/2019/07/25/springboot%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E6%A0%A1%E9%AA%8C/"/>
      <url>/2019/07/25/springboot%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="springboot处理集合类型校验"><a href="#springboot处理集合类型校验" class="headerlink" title="springboot处理集合类型校验"></a>springboot处理集合类型校验</h3><hr><blockquote><p>本文所用相关版本:<br>springboot版本2.1.6.RELEASE<br>kotlin版本1.2.71<br>gradle版本5.2.1<br>idea版本2019.1.2 ultimate edition</p></blockquote><hr><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><ul><li><p>点击file -&gt; new project -&gt;选择spring initializrd点击下一步</p></li><li><p>选择语言,选择项目管理工具<br>  <img src="https://i.loli.net/2019/09/28/dufNkUJ6axel3O9.png" alt="image.png"></p></li><li><p>此篇我们讨论只涉及校验,只引入springWebStarter即可</p></li><li><p>选择gradle路径(或者使用默认的),这里我选择本地路径<br>  <img src="https://i.loli.net/2019/09/28/1dLSl6iOIhGC74W.png" alt="image.png"></p></li><li><p>输入项目路径,点击finish,查看项目结构,我们可以看到生成的gradle依赖文件变成了kts后缀的文件,和之前比起来,配置会略有不同</p></li><li><p>增加国内镜像地址<br>  追加根节点</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven (url = <span class="string">"http://maven.aliyun.com/nexus/content/groups/public/"</span>)</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新导入等待编译完成</p></li></ul><h4 id="重现无法校验场景"><a href="#重现无法校验场景" class="headerlink" title="重现无法校验场景"></a>重现无法校验场景</h4><ul><li><p>增加测试控制器和测试类,这里我直接加在了启动类上</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(<span class="meta-string">"/demo"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">demo</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> user: <span class="type">User</span>)</span></span>: User &#123;</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(<span class="meta-string">"/demoList"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">demoList</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> user: <span class="type">List</span>&lt;<span class="type">User</span>&gt;)</span></span>: List&lt;User&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = <span class="meta-string">"用户名不能为空"</span>)</span></span><br><span class="line">    <span class="keyword">val</span> username: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">val</span> password: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    runApplication&lt;DemoApplication&gt;(*args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>增加测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner::class)</span></span><br><span class="line"><span class="meta">@WebMvcTest(DemoApplication::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebMvcTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mockMvc: MockMvc</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> example = <span class="string">"&#123;\"username\":\"\", \"password\":\"111\"&#125;"</span></span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/demo"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_VALUE).content(example))</span><br><span class="line">                .andExpect(status().isOk).andDo &#123; println(it.response.contentAsString) &#125;.andReturn()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testDemoList</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> example = <span class="string">"[&#123;\"username\":\"\", \"password\":\"111\"&#125;]"</span></span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/demoList"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_VALUE).content(example))</span><br><span class="line">                .andExpect(status().isOk).andDo &#123; println(it.response.contentAsString) &#125;.andReturn()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们先执行能够正常执行校验的测试方法testDemo,执行后发现控制台报错,说明参数被校验了<br>  <img src="https://i.loli.net/2019/09/28/sUyxuClac4gPQIV.png" alt="image.png"></p></li><li><p>但执行List时参数却未被校验<br>  <img src="https://i.loli.net/2019/09/28/KDjE8gNXFTesdLv.png" alt="image.png"></p></li></ul><h4 id="处理方案"><a href="#处理方案" class="headerlink" title="处理方案"></a>处理方案</h4><h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1:"></a>方案1:</h5><ul><li><p>新建类包装List,在list上加上@Valid(javax包中)(由于@Validated不支持放在字段上,所以无法使用)注解  </p><ul><li><p>控制器方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(<span class="meta-string">"/demoValidList"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demoValidList</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> user: <span class="type">ValidList</span>&lt;<span class="type">User</span>&gt;)</span></span>: List&lt;User&gt;? &#123;</span><br><span class="line">    <span class="keyword">return</span> user.list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包装类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidList</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">val</span> list: List&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testDemoValidList</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> example = <span class="string">"&#123;\"list\":[&#123;\"username\":\"\", \"password\":\"111\"&#125;]&#125;"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/demoValidList"</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON_VALUE).content(example))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; println(it.response.contentAsString) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  <strong>可以看到此方案需要我们将传输的参数变为对象,多了一层无用的嵌套,并且由于@Valid注解的缺陷,无法使用分组</strong></p><h5 id="方案2"><a href="#方案2" class="headerlink" title="方案2:"></a>方案2:</h5></li><li><p>我们可以采用实现list接口并转接方法的方式,去掉这层无用的嵌套</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidList1</span>&lt;<span class="type">T</span>&gt; : <span class="type">MutableList</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> list.iterator()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">listIterator</span><span class="params">()</span></span>: MutableListIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> list.listIterator()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">listIterator</span><span class="params">(index: <span class="type">Int</span>)</span></span>: MutableListIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> list.listIterator(index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">subList</span><span class="params">(fromIndex: <span class="type">Int</span>, toIndex:<span class="type">Int</span>)</span></span>: MutableList&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> list.subList(fromIndex, toIndex)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.add(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(index: <span class="type">Int</span>, element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.add(index, element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addAll</span><span class="params">(index: <span class="type">Int</span>, elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.addAll(index, elements)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.addAll(elements)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.clear()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.removeAll(elements)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeAt</span><span class="params">(index: <span class="type">Int</span>)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> list.removeAt(index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">retainAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.retainAll(elements)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">set</span><span class="params">(index: <span class="type">Int</span>, element: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> list.<span class="keyword">set</span>(index, element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = list.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">contains</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.contains(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">containsAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.containsAll(elements)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(index: <span class="type">Int</span>)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> list[index]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">indexOf</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.indexOf(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">lastIndexOf</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.lastIndexOf(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">val</span> list: MutableList&lt;T&gt; = mutableListOf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(<span class="meta-string">"/demoValidList1"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demoValidList</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> user: <span class="type">ValidList1</span>&lt;<span class="type">User</span>&gt;)</span></span>: List&lt;User&gt;? &#123;</span><br><span class="line">    <span class="keyword">return</span> user.list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testDemoValidList1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> example = <span class="string">"[&#123;\"username\":\"\", \"password\":\"111\"&#125;]"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/demoValidList1"</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON_VALUE).content(example))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; println(it.response.contentAsString) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用kotlin委托我们可以节省部分代码(注意直接在list上增加@Valid是无效的)</p><ul><li><p>委托器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidList2</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">val</span> list: MutableList&lt;T&gt;) : MutableList&lt;T&gt; <span class="keyword">by</span> list &#123;</span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">var</span> mlist: MutableList&lt;T&gt; = list</span><br><span class="line">    <span class="keyword">constructor</span>() : <span class="keyword">this</span>(mutableListOf())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(<span class="meta-string">"/demoValidList2"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demoValidList2</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> user: <span class="type">ValidList2</span>&lt;<span class="type">User</span>&gt;)</span></span>: List&lt;User&gt;? &#123;</span><br><span class="line">    <span class="keyword">return</span> user.list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testDemoValidList2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> example = <span class="string">"[&#123;\"username\":\"\", \"password\":\"111\"&#125;]"</span></span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/demoValidList2"</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON_VALUE).content(example))</span><br><span class="line">            .andExpect(status().isOk).andDo &#123; println(it.response.contentAsString) &#125;.andReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>如果使用的是java我们也可以利用lombok替我们节省部分代码</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Delegate</span></span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>由于未做异常拦截,以上方案 正常校验,验证器将抛出异常</strong><br><img src="https://i.loli.net/2019/09/28/5ScyJOqR3BCmnVD.png" alt="image.png"><br><strong>方案1和方案2本质上是一致的,缺点在于对于控制器代码的侵入性较大(意味着所有需要校验list的控制器方法都需要修改类为新的包装类)</strong></p><h5 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h5><ul><li><p>我们可以自定义验证器并配置@ControllerAdvice统一为集合增加验证器</p><ul><li><p>自定义验证器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionValidator</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> validatorFactory: LocalValidatorFactoryBean) : Validator &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">supports</span><span class="params">(clazz: <span class="type">Class</span>&lt;*&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collection::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">isAssignableFrom</span></span>(clazz)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验集合 遇到失败即退出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 受校验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errors 错误结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">validate</span><span class="params">(target: <span class="type">Any</span>, errors: <span class="type">Errors</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> collection = target <span class="keyword">as</span> Collection&lt;*&gt;</span><br><span class="line">        <span class="keyword">for</span> (`<span class="keyword">object</span>` <span class="keyword">in</span> collection) &#123;</span><br><span class="line">            `<span class="keyword">object</span>`?.let &#123; ValidationUtils.invokeValidator(validatorFactory, `<span class="keyword">object</span>`, errors) &#125;</span><br><span class="line">            <span class="comment">// 存在错误即退出校验</span></span><br><span class="line">            <span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器拦截</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionValidatorAdvice</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> collectionValidator: CollectionValidator) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在initBinder阶段修改集合类型的校验器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">initBinder</span><span class="params">(binder: <span class="type">WebDataBinder</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 这里必须判断 否则会影响非集合类型校验</span></span><br><span class="line">        <span class="keyword">if</span> (binder.target !<span class="keyword">is</span> Collection&lt;*&gt;) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        binder.addValidators(collectionValidator)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionValidatorConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> localValidatorFactoryBean: LocalValidatorFactoryBean</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">collectionValidator</span><span class="params">()</span></span>: CollectionValidator &#123;</span><br><span class="line">        <span class="keyword">return</span> CollectionValidator(localValidatorFactoryBean)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改测试类,导入配置文件</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner::class)</span></span><br><span class="line"><span class="meta">@WebMvcTest(DemoApplication::class)</span></span><br><span class="line"><span class="meta">@Import(CollectionValidatorConfig::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebMvcTest</span></span></span><br></pre></td></tr></table></figure></li><li><p>再次运行testDemoList此时此方法将受校验  </p></li></ul></li></ul><p><strong>同样由于未做异常拦截,以上方案,验证器将抛出异常</strong><br>    <img src="https://i.loli.net/2019/09/28/gI4nPkjoG5Ja9wW.png" alt="image.png"><br><strong>方案3允许使用分组,对参数不需要做变更,而其缺陷在于如果想要知道是集合的哪条数据出现问题相对而言不太容易</strong></p><h4 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/kotlin-web/tree/master/kotlin-springboot-collection-validation" target="_blank" rel="noopener">代码链接</a></h4>]]></content>
      
      
      <categories>
          
          <category> kotlin web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> kotlin </tag>
            
            <tag> web </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gradle构建springboot项目</title>
      <link href="/2019/03/03/%E4%BD%BF%E7%94%A8gradle%E6%9E%84%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/03/03/%E4%BD%BF%E7%94%A8gradle%E6%9E%84%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="使用gradle构建springboot项目"><a href="#使用gradle构建springboot项目" class="headerlink" title="使用gradle构建springboot项目"></a>使用gradle构建springboot项目</h3><hr><blockquote><p>本文所用相关版本:<br>springboot版本2.1.3.RELEASE<br>kotlin版本1.3.21<br>gradle版本5.2.1<br>idea版本2018.2.6 ultimate edition</p></blockquote><hr><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><ul><li>点击file -&gt; new project -&gt; 选择新建gradle项目<br>  <img src="https://i.loli.net/2019/09/28/Gi1Rs6D9ILOaTon.png" alt="image.png"></li><li>输入groupId和artifactId 进入下一步</li><li>勾选使用本地gradle路径,选择gradle所在根路径(即bin的上层路径) 进入下一步<br>  <img src="https://i.loli.net/2019/09/28/LETbvJpMadqXxOe.png" alt="image.png"></li><li>选择项目路径 点击finish等待项目构建完成</li></ul><h4 id="引入springboot"><a href="#引入springboot" class="headerlink" title="引入springboot"></a>引入springboot</h4><ul><li><p>修改maven依赖访问地址,使用国内镜像</p><ul><li>在build.gradle中加入  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven&#123;</span><br><span class="line">        url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>引入springboot</p><ul><li><p>在plugins节点中加入</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id &apos;org.springframework.boot&apos; version &apos;2.1.3.RELEASE&apos;</span><br></pre></td></tr></table></figure></li><li><p>加入根节点 使用spingboot插件(即最顶层)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;io.spring.dependency-management&apos;</span><br></pre></td></tr></table></figure></li><li><p>引入springboot web和test依赖 在dependencies节点加入</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;org.springframework.boot:spring-boot-starter-web&apos;</span><br><span class="line">testImplementation &apos;org.springframework.boot:spring-boot-starter-test&apos;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>新建启动类并测试</p><ul><li><p>在java文件夹或kotlin文件夹下创建springboot启动类</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRun</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runApplication&lt;SpringbootRun&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击右侧bootRun尝试启动(注意这里bootRun会自动扫描main方法,如果存在多个main方法只会选择其中一个),或者使用传统方式启动<br>  <img src="https://i.loli.net/2019/09/28/zZRoTUX36k4GOtV.png" alt="image.png"></p></li><li><p>访问localhost:8080查看结果<br>  <img src="https://i.loli.net/2019/09/28/CjK4qsF6AI93bdW.png" alt="image.png"></p></li></ul></li><li><p>打成jar包并运行</p><ul><li>点击右侧build下bootJar<br>  <img src="https://i.loli.net/2019/09/28/ihwdZ64DHVLtAO1.png" alt="image.png"></li><li>项目下build/libs/将会生成一个jar包<br>  <img src="https://i.loli.net/2019/09/28/ZceH7LAsOfXpiNj.png" alt="image.png"></li><li>使用命令行运行,并访问<br>  <img src="https://i.loli.net/2019/09/28/IKtVEFskcBrZLou.png" alt="image.png"></li></ul></li><li><p>打成war包并运行</p><ul><li><p>修改build.gradle 加入根节点</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;war&apos;</span><br></pre></td></tr></table></figure></li><li><p>修改启动类使其继承SpringBootServletInitializer</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRun</span> : <span class="type">SpringBootServletInitializer</span></span>()</span><br></pre></td></tr></table></figure></li><li><p>点击右侧bootWar</p></li><li><p>拷贝war包至tomcat安装路径webapps下</p></li><li><p>运行bin/startup.bat 启动tomcat并尝试访问</p></li><li><p>访问结果<br>  <img src="https://i.loli.net/2019/09/28/yWQzl7G5ikmPTfF.png" alt="image.png"></p></li></ul></li><li><p>打成war包使用jetty运行</p><ul><li><p>修改build.gradle 加入根节点</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configurations &#123;</span><br><span class="line">    compile.exclude module: <span class="string">"spring-boot-starter-tomcat"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入依赖</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;org.springframework.boot:spring-boot-starter-jetty&apos;</span><br></pre></td></tr></table></figure></li><li><p>点击右侧bootWar</p></li><li><p>拷贝war包至jetty安装路径webapps下</p></li><li><p>运行,并访问</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar start.jar</span><br></pre></td></tr></table></figure></li><li><p>访问结果:<br>  <img src="https://i.loli.net/2019/09/28/fTC3hg4ajxNXQqr.png" alt="image.png"><br>  <img src="https://i.loli.net/2019/09/28/FLZB4ayjwv2t8cE.png" alt="image.png"></p></li></ul></li></ul><h4 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/kotlin-web/tree/master/springboot-gradle" target="_blank" rel="noopener">代码链接</a></h4>]]></content>
      
      
      <categories>
          
          <category> kotlin web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> kotlin </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis和redisson分布式锁集成</title>
      <link href="/2019/01/20/redis%E5%92%8Credisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E9%9B%86%E6%88%90/"/>
      <url>/2019/01/20/redis%E5%92%8Credisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h3 id="redis和redisson分布式锁集成"><a href="#redis和redisson分布式锁集成" class="headerlink" title="redis和redisson分布式锁集成"></a>redis和redisson分布式锁集成</h3><hr><blockquote><p>本文所用springboot版本2.1.2.RELEASE<br>kotlin版本1.3.11 </p></blockquote><h4 id="新建项目请参考"><a href="#新建项目请参考" class="headerlink" title="新建项目请参考"></a><em>新建项目请参考<a href="/2019/01/15/springboot初探和配置文件映射/" title="springboot初探和配置文件映射">springboot初探和配置文件映射</a></em></h4><hr><h4 id="redis集成"><a href="#redis集成" class="headerlink" title="redis集成"></a>redis集成</h4><ul><li><p>新增依赖</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-<span class="keyword">data</span>-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>新增配置项</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: <span class="number">127.0</span>.0.1</span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    timeout: <span class="number">1000</span>ms</span><br></pre></td></tr></table></figure></li><li><p>配置redisTemplate</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将redisTemplate格式化为string,any格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory redis连接工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redisTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">redisTemplate</span><span class="params">(factory: <span class="type">RedisConnectionFactory</span>)</span></span>:RedisTemplate&lt;String,Any&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> template = RedisTemplate&lt;String,Any&gt;()</span><br><span class="line">        template.setConnectionFactory(factory)</span><br><span class="line">        <span class="keyword">val</span> jackson2JsonRedisSerializer = Jackson2JsonRedisSerializer(Any::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        <span class="keyword">val</span> om = ObjectMapper()</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY)</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL)</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om)</span><br><span class="line">        <span class="keyword">val</span> stringRedisSerializer = StringRedisSerializer()</span><br><span class="line">        template.keySerializer = stringRedisSerializer</span><br><span class="line">        template.hashKeySerializer = stringRedisSerializer</span><br><span class="line">        template.valueSerializer = jackson2JsonRedisSerializer</span><br><span class="line">        template.hashValueSerializer = jackson2JsonRedisSerializer</span><br><span class="line">        template.afterPropertiesSet()</span><br><span class="line">        <span class="keyword">return</span> template</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建测试类,继承生成的测试类,并运行</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> : <span class="type">KotlinSpringbootApplicationTests</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>.javaClass)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> testKey = <span class="keyword">this</span>.javaClass.name</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisTemplate: RedisTemplate&lt;String, Any&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testString</span><span class="params">()</span></span> &#123;</span><br><span class="line">        log.info(<span class="string">"---设置值---"</span>)</span><br><span class="line">        redisTemplate.opsForValue().<span class="keyword">set</span>(testKey, <span class="string">"hello"</span>)</span><br><span class="line">        <span class="keyword">val</span> str = redisTemplate.opsForValue().<span class="keyword">get</span>(testKey) <span class="keyword">as</span>? String</span><br><span class="line">        log.info(<span class="string">"---打印值:<span class="variable">$str</span>---"</span>)</span><br><span class="line">        redisTemplate.delete(testKey)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://i.loli.net/2019/09/28/zNA1sD8uUaVt6FY.png" alt="image.png"></p></li><li><p>尝试进行对象存储</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> username:String, <span class="keyword">val</span> sex:String,<span class="keyword">val</span> phone:<span class="built_in">Long</span>)</span><br><span class="line"><span class="comment">//新增测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testAny</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> user = User(<span class="string">"maple"</span>,<span class="string">"man"</span>,<span class="number">18011111111</span>)</span><br><span class="line">    log.info(<span class="string">"---设置对象---"</span>)</span><br><span class="line">    redisTemplate.opsForValue().<span class="keyword">set</span>(testKey, user)</span><br><span class="line">    <span class="keyword">val</span> user = redisTemplate.opsForValue().<span class="keyword">get</span>(testKey) <span class="keyword">as</span>? User</span><br><span class="line">    log.info(<span class="string">"---打印值:<span class="variable">$user</span>---"</span>)</span><br><span class="line">    redisTemplate.delete(testKey)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://i.loli.net/2019/09/28/REJpaqO7G6bdTHQ.png" alt="image.png"><br>  我们会发现当前的序列化工具对于kotlin对象的序列化并不是那么理想,我们需要重写一个序列化工具</p><h5 id="方式1-使用hessian帮助我们进行序列化"><a href="#方式1-使用hessian帮助我们进行序列化" class="headerlink" title="方式1:使用hessian帮助我们进行序列化"></a>方式1:使用hessian帮助我们进行序列化</h5>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依赖</span></span><br><span class="line">&lt;hessian.vesion&gt;<span class="number">4.0</span>.51&lt;/hessian.vesion&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.caucho&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hessian&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;hessian.vesion&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化工具包</span></span><br><span class="line"><span class="keyword">object</span> SerializeUtils&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hessianDeserialize</span><span class="params">(<span class="keyword">by</span>: <span class="type">ByteArray</span>?)</span></span>: Any &#123;</span><br><span class="line">        <span class="keyword">by</span>?: <span class="keyword">throw</span> NullPointerException()</span><br><span class="line">        <span class="keyword">return</span> hessianDeserialize(ByteArrayInputStream(<span class="keyword">by</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hessianDeserialize</span><span class="params">(input:<span class="type">InputStream</span>)</span></span>: Any&#123;</span><br><span class="line">        <span class="keyword">return</span> HessianInput(input).readObject()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hessianSerialize</span><span class="params">(obj: <span class="type">Any</span>?)</span></span>: ByteArray &#123;</span><br><span class="line">        obj?: <span class="keyword">throw</span> NullPointerException()</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> os = ByteArrayOutputStream()</span><br><span class="line">            <span class="keyword">val</span> ho = HessianOutput(os)</span><br><span class="line">            ho.writeObject(obj)</span><br><span class="line">            <span class="keyword">return</span> os.toByteArray()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hessianSerialize</span><span class="params">(obj: <span class="type">Any</span>,<span class="keyword">out</span>:<span class="type">OutputStream</span>)</span></span>&#123;</span><br><span class="line">        HessianOutput(<span class="keyword">out</span>).writeObject(obj)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">javaSerialize</span><span class="params">(obj: <span class="type">Any</span>?)</span></span>:ByteArray&#123;</span><br><span class="line">        obj?: <span class="keyword">throw</span> NullPointerException()</span><br><span class="line">        <span class="keyword">val</span> os = ByteArrayOutputStream()</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">out</span> = ObjectOutputStream(os)</span><br><span class="line">        <span class="keyword">out</span>.writeObject(obj)</span><br><span class="line">        <span class="keyword">return</span> os.toByteArray()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">javaSerialize</span><span class="params">(<span class="keyword">by</span>: <span class="type">ByteArray</span>?)</span></span>:Any&#123;</span><br><span class="line">        <span class="keyword">by</span>?: <span class="keyword">throw</span> NullPointerException()</span><br><span class="line">        <span class="keyword">val</span> `<span class="keyword">is</span>` = ByteArrayInputStream(<span class="keyword">by</span>)</span><br><span class="line">        <span class="keyword">val</span> `<span class="keyword">in</span>` = ObjectInputStream(`<span class="keyword">is</span>`)</span><br><span class="line">        <span class="keyword">return</span> `<span class="keyword">in</span>`.readObject()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建类实现RedisSerializer(对象需要实现序列化)并修改redis配置</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HessianRedisSerializer</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">private</span> <span class="keyword">var</span> clazz: Class&lt;T&gt;) : RedisSerializer&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(t: <span class="type">T</span>?)</span></span>: ByteArray? &#123;</span><br><span class="line">        <span class="keyword">return</span> SerializeUtils.hessianSerialize(t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(bt: <span class="type">ByteArray</span>?)</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span>(bt == <span class="literal">null</span> || bt.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        <span class="meta">@Suppress(<span class="meta-string">"UNCHECKED_CAST"</span>)</span></span><br><span class="line">        <span class="keyword">return</span> SerializeUtils.hessianDeserialize(bt) <span class="keyword">as</span>? T</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//redis配置</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">redisTemplate</span><span class="params">(factory: <span class="type">RedisConnectionFactory</span>)</span></span>:RedisTemplate&lt;String,Any&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> template = RedisTemplate&lt;String,Any&gt;()</span><br><span class="line">    template.setConnectionFactory(factory)</span><br><span class="line">    <span class="keyword">val</span> hessianRedisSerializer = HessianRedisSerializer(Any::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    <span class="keyword">val</span> stringRedisSerializer = StringRedisSerializer()</span><br><span class="line">    template.keySerializer = stringRedisSerializer</span><br><span class="line">    template.hashKeySerializer = stringRedisSerializer</span><br><span class="line">    template.valueSerializer = hessianRedisSerializer</span><br><span class="line">    template.hashValueSerializer = hessianRedisSerializer</span><br><span class="line">    template.afterPropertiesSet()</span><br><span class="line">    <span class="keyword">return</span> template</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改实体类 让实体类实现序列化接口</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> username:String, <span class="keyword">val</span> sex:String,<span class="keyword">val</span> phone:<span class="built_in">Long</span>):Serializable</span><br></pre></td></tr></table></figure></li><li><p>再次测试,存取成功<br>  <img src="https://i.loli.net/2019/09/28/mzYk71wx6yqMgLj.png" alt="image.png"></p><h5 id="方式2-使用java-对象输入输出流实现-对象需要实现序列化-比较慢-不推荐"><a href="#方式2-使用java-对象输入输出流实现-对象需要实现序列化-比较慢-不推荐" class="headerlink" title="方式2,使用java 对象输入输出流实现(对象需要实现序列化) 比较慢 不推荐"></a>方式2,使用java 对象输入输出流实现(对象需要实现序列化) 比较慢 不推荐</h5>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HessianRedisSerializer</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">private</span> <span class="keyword">var</span> clazz: Class&lt;T&gt;) : RedisSerializer&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(t: <span class="type">T</span>?)</span></span>: ByteArray? &#123;</span><br><span class="line">        <span class="keyword">return</span> SerializeUtils.hessianSerialize(t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(bt: <span class="type">ByteArray</span>?)</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span>(bt == <span class="literal">null</span> || bt.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        <span class="meta">@Suppress(<span class="meta-string">"UNCHECKED_CAST"</span>)</span></span><br><span class="line">        <span class="keyword">return</span> SerializeUtils.hessianDeserialize(bt) <span class="keyword">as</span>? T</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="方式3-使用fastjson-对象可以不用实现序列化"><a href="#方式3-使用fastjson-对象可以不用实现序列化" class="headerlink" title="方式3,使用fastjson,对象可以不用实现序列化"></a>方式3,使用fastjson,对象可以不用实现序列化</h5><pre><code><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依赖</span></span><br><span class="line">&lt;fast-json.vesion&gt;<span class="number">1.2</span>.54&lt;/fast-json.vesion&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;fast-json.vesion&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"><span class="comment">//序列化类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FastJsonRedisSerializer</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">private</span> <span class="keyword">val</span> clazz:Class&lt;T&gt; ) : RedisSerializer&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> charset = Charset.forName(<span class="string">"utf-8"</span>)!!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(t: <span class="type">T</span>?)</span></span>: ByteArray? &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).toByteArray(charset)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(bt: <span class="type">ByteArray</span>?)</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span>(bt == <span class="literal">null</span> || bt.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        <span class="keyword">val</span> str = String(bt, charset)</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject&lt;T&gt;(str, clazz)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">redisTemplate</span><span class="params">(factory: <span class="type">RedisConnectionFactory</span>)</span></span>:RedisTemplate&lt;String,Any&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> template = RedisTemplate&lt;String,Any&gt;()</span><br><span class="line">    template.setConnectionFactory(factory)</span><br><span class="line">    <span class="keyword">var</span> fastJsonRedisSerializer = FastJsonRedisSerializer(Any::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    <span class="comment">//配置白名单</span></span><br><span class="line">    ParserConfig.getGlobalInstance().addAccept(<span class="string">"com.maple.kotlinspringboot.entity.User"</span>)</span><br><span class="line">    <span class="comment">//或者直接关闭这个检测</span></span><br><span class="line">    <span class="comment">//ParserConfig.getGlobalInstance().isAutoTypeSupport = true</span></span><br><span class="line">    <span class="keyword">val</span> stringRedisSerializer = StringRedisSerializer()</span><br><span class="line">    template.keySerializer = stringRedisSerializer</span><br><span class="line">    template.hashKeySerializer = stringRedisSerializer</span><br><span class="line">    template.valueSerializer = fastJsonRedisSerializer</span><br><span class="line">    template.hashValueSerializer = fastJsonRedisSerializer</span><br><span class="line">    template.afterPropertiesSet()</span><br><span class="line">    <span class="keyword">return</span> template</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li>做一个简单的redis工具包  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisTemplate: RedisTemplate&lt;String, Any&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定缓存对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> any 值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Any&gt;</span> <span class="title">getT</span><span class="params">(key: <span class="type">String</span>)</span></span>:T? &#123;</span><br><span class="line">        <span class="meta">@Suppress(<span class="meta-string">"UNCHECKED_CAST"</span>)</span></span><br><span class="line">        <span class="keyword">return</span>  redisTemplate.opsForValue().<span class="keyword">get</span>(key) <span class="keyword">as</span>? T</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取long值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> any 值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getLong</span><span class="params">(key: <span class="type">String</span>)</span></span>:<span class="built_in">Long</span>?&#123;</span><br><span class="line">        <span class="keyword">val</span> value = getAny(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span>(value)&#123;</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Byte</span> -&gt; value.toLong()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; value.toLong()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; value</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Float</span> -&gt; value.toLong()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Double</span> -&gt; value.toLong()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Char</span> -&gt; value.toLong()</span><br><span class="line">            <span class="keyword">is</span> String -&gt; value.toLongOrNull()</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取int值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> any 值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getInt</span><span class="params">(key: <span class="type">String</span>)</span></span>:<span class="built_in">Int</span>?&#123;</span><br><span class="line">        <span class="keyword">val</span> value = getAny(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span>(value)&#123;</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Byte</span> -&gt; value.toInt()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; value</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; value.toInt()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Float</span> -&gt; value.toInt()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Double</span> -&gt; value.toInt()</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Char</span> -&gt; value.toInt()</span><br><span class="line">            <span class="keyword">is</span> String -&gt; value.toIntOrNull()</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入普通缓存对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setAny</span><span class="params">(key:<span class="type">String</span>,value:<span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().<span class="keyword">set</span>(key,value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除普通缓存对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(key:<span class="type">String</span>)</span></span>:<span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取普通缓存对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> any 值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAny</span><span class="params">(key: <span class="type">String</span>)</span></span>:Any? &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().<span class="keyword">get</span>(key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="redisson集成"><a href="#redisson集成" class="headerlink" title="redisson集成"></a>redisson集成</h4><ul><li><p>引入依赖</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;redisson.version&gt;<span class="number">3.10</span>.0&lt;/redisson.version&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;redisson.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置bean</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> redisProperties: RedisProperties</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">redisClient</span><span class="params">()</span></span>: RedissonClient &#123;</span><br><span class="line">    <span class="keyword">val</span> serverConfig = Config().apply &#123;</span><br><span class="line">        <span class="keyword">this</span>.useSingleServer()</span><br><span class="line">                .setAddress(<span class="string">"redis://<span class="subst">$&#123;redisProperties.host&#125;</span>:<span class="subst">$&#123;redisProperties.port&#125;</span>"</span>).timeout = (redisProperties.timeout.seconds * <span class="number">1000</span>).toInt()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Redisson.create(serverConfig)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisLockTest</span> : <span class="type">BaseTest</span></span>()&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(<span class="keyword">this</span>.javaClass)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> testRedisKey = <span class="keyword">this</span>.javaClass.name</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> lockKey = <span class="string">"testLockKey"</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisUtils: RedisUtils</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisClient: RedissonClient</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        log.info(<span class="string">"----------before-----------"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">tearDown</span><span class="params">()</span></span> &#123;</span><br><span class="line">        log.info(<span class="string">"----------after-----------"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisUtils.setAny(testRedisKey,<span class="number">100</span>)</span><br><span class="line">        println(redisUtils.getInt(testRedisKey))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">val</span> lock:RLock = redisClient.getLock(lockKey)</span><br><span class="line">        println(<span class="string">"---尝试上锁---"</span>)</span><br><span class="line">        lock.tryLock(<span class="number">20</span>, TimeUnit.SECONDS)</span><br><span class="line">        println(<span class="string">"---进入循环---"</span>)</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">val</span> stock = redisUtils.getInt(testRedisKey)</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">            <span class="keyword">if</span>(stock!! &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                redisUtils.setAny(testRedisKey, value = stock-<span class="number">1</span>)</span><br><span class="line">                println(<span class="string">"stock: <span class="variable">$stock</span>-1"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lock.unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>先执行一次设值,再同时运行两次测试类,我们希望达到的效果是,当第一个执行完循环时,第二个才开始进入循环,可以看到,最终结果确如我们所愿<br>  <img src="https://i.loli.net/2019/09/28/2ALRvEJkh67pPsn.gif" alt="redis-lock.gif"></p></li></ul><h4 id="注解获取缓存对象"><a href="#注解获取缓存对象" class="headerlink" title="注解获取缓存对象"></a>注解获取缓存对象</h4><ul><li><p>不论我们使用shiro,还是security或是其他的框架做项目的权限控制,我们可能需要将用户存入缓存中,这里我使用注解获取缓存中的用户对象</p></li><li><p>新建一个注解类</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(AnnotationTarget.VALUE_PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(AnnotationRetention.RUNTIME)</span></span><br><span class="line"><span class="keyword">annotation</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentUser</span></span></span><br></pre></td></tr></table></figure></li><li><p>新建一个方法解析器</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentUserMethodArgumentResolver</span>:<span class="type">HandlerMethodArgumentResolver&#123;</span></span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisUtils: RedisUtils</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">supportsParameter</span><span class="params">(parameter: <span class="type">MethodParameter</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parameter.parameterType.isAssignableFrom(User::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">                &amp;&amp; parameter.hasParameterAnnotation(CurrentUser::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resolveArgument</span><span class="params">(parameter: <span class="type">MethodParameter</span>, mavContainer: <span class="type">ModelAndViewContainer</span>?, webRequest: <span class="type">NativeWebRequest</span>, binderFactory: <span class="type">WebDataBinderFactory</span>?)</span></span>: Any? &#123;</span><br><span class="line">        <span class="keyword">return</span> redisUtils.getT&lt;User&gt;(<span class="string">"currentUser"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改spring配置</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> : <span class="type">WebMvcConfigurer &#123;</span></span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> currentUserResolver: CurrentUserMethodArgumentResolver</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addViewControllers</span><span class="params">(registry: <span class="type">ViewControllerRegistry</span>)</span></span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"forward:/hello"</span>)</span><br><span class="line">        registry.setOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addArgumentResolvers</span><span class="params">(resolvers: <span class="type">MutableList</span>&lt;<span class="type">HandlerMethodArgumentResolver</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.addArgumentResolvers(resolvers)</span><br><span class="line">        resolvers.add(currentUserResolver)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改控制层</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> redisUtils: RedisUtils</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">(<span class="meta">@CurrentUser</span> user:<span class="type">User</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/testLogin"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testLogin</span><span class="params">(user:<span class="type">User</span>)</span></span>: String &#123;</span><br><span class="line">        redisUtils.setAny(<span class="string">"currentUser"</span>,user)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>依次运行<br><a href="http://localhost:9001/testLogin?username=me&amp;sex=man&amp;phone=1000" target="_blank" rel="noopener">http://localhost:9001/testLogin?username=me&amp;sex=man&amp;phone=1000</a><br><a href="http://localhost:9001/hello" target="_blank" rel="noopener">http://localhost:9001/hello</a><br>可以看到我们成功取到了这个对象<br>  <img src="https://i.loli.net/2019/09/28/UdMj8DkoYxl4fcr.png" alt="image.png"> </p></li></ul><h4 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/kotlin-web/tree/master/kotlin-springboot-redis" target="_blank" rel="noopener">代码链接</a></h4><p><a href="#top">回到顶部</a></p>]]></content>
      
      
      <categories>
          
          <category> kotlin web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> kotlin </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot初探和配置文件映射</title>
      <link href="/2019/01/15/springboot%E5%88%9D%E6%8E%A2%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84/"/>
      <url>/2019/01/15/springboot%E5%88%9D%E6%8E%A2%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="springboot初探和配置文件映射"><a href="#springboot初探和配置文件映射" class="headerlink" title="springboot初探和配置文件映射"></a>springboot初探和配置文件映射</h3><hr><blockquote><p>本文所用springboot版本2.1.2.RELEASE<br>kotlin版本1.3.11</p></blockquote><hr><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><ul><li><p>选择Spring Initializr</p></li><li><p>在metadata页面中选择kotlin作为语言<br>  <img src="https://i.loli.net/2019/09/28/fR5BJe9FXrNvMhb.png" alt="image.png"></p></li><li><p>依赖勾选web<br>  <img src="https://i.loli.net/2019/09/28/vObIGPTYgKLFSfh.png" alt="image.png"></p></li><li><p>将kotlin文件夹设为项目资源文件夹,并等待项目依赖下载完毕<br>  <img src="https://i.loli.net/2019/09/28/3X7mJgEG4kpZLhb.png" alt="image.png"></p></li><li><p>新建测试控制器并设置/hello为默认映射路径</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> : <span class="type">WebMvcConfigurer &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addViewControllers</span><span class="params">(registry: <span class="type">ViewControllerRegistry</span>)</span></span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"forward:/hello"</span>)</span><br><span class="line">        registry.setOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目访问页面<br>  <img src="https://i.loli.net/2019/09/28/m1hQnBGlIpAaYi6.png" alt="image.png"></p></li></ul><h4 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h4><ul><li><p>新建配置文件test.yml,并添加几个值(如果需要yml配置文件的提示可以安装spring assistant插件,或者点项目配置将其加入配置列表)<br>  <img src="https://i.loli.net/2019/09/28/WLBMZfFOdqnXYeK.png" alt="image.png"></p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">  name: maple</span><br><span class="line">  sex: man</span><br><span class="line">  phone: <span class="number">18111111111</span></span><br><span class="line">  children: &#123;name: merry,sex: woman&#125;</span><br><span class="line">  lists:</span><br><span class="line">    - <span class="number">1</span></span><br><span class="line">    - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要使用传统properties配置需要引入依赖</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改控制器为属性注入值,注意由于kotlin字符串中的$本身有其含义,因此需要加反斜杠转义</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(<span class="meta-string">"\$&#123;person.name&#125;"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> username:String</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello <span class="variable">$username</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问项目<br>  <img src="https://i.loli.net/2019/09/28/flnDexAr8PJUNoi.png" alt="image.png"></p></li><li><p>实体映射,由于默认的工厂对自定义yml解析有问题,新建映射工厂类解析yml,新建实体并修改控制器(如果需要使用kotlin中的data类型 需要手动注bean)</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YamlPropertySourceFactory</span> : <span class="type">PropertySourceFactory &#123;</span></span></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createPropertySource</span><span class="params">(name: <span class="type">String</span>?, resource: <span class="type">EncodedResource</span>)</span></span>: PropertySource&lt;*&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (name != <span class="literal">null</span>)</span><br><span class="line">            YamlPropertySourceLoader().load(name, resource.resource)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            YamlPropertySourceLoader().load(</span><br><span class="line">                getNameForResource(resource.resource), resource.resource)[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getNameForResource</span><span class="params">(resource: <span class="type">Resource</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">var</span> name = resource.getDescription()</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class="line">            name = resource::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">getSimpleName</span></span>() + <span class="string">"@"</span> + System.identityHashCode(resource)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//映射类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = <span class="meta-string">"person"</span>)</span></span><br><span class="line"><span class="meta">@PropertySource(<span class="meta-string">"classpath:/test.yml"</span>,factory = YamlPropertySourceFactory::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> name: String</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> sex: String</span><br><span class="line">    <span class="keyword">var</span> phone = <span class="number">0L</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> children: Map&lt;String,String&gt;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> lists: List&lt;String&gt;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>:String&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name:<span class="variable">$name</span>,sex:<span class="variable">$sex</span>,phone:<span class="variable">$phone</span>,children:<span class="variable">$children</span>,lists:<span class="variable">$lists</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改 controller</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> userProperties:UserProperties</span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> userProperties.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试<br>  <img src="https://i.loli.net/2019/09/28/3oMwdXUGt5B1gPZ.png" alt="image.png"></p></li><li><p>另:使用kotlin data class类型注入(对于map类型的属性暂时没有找到特别好的办法解决)</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改映射类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(<span class="meta-string">"classpath:/test.yml"</span>,factory = YamlPropertySourceFactory::class)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProperties</span></span>(<span class="meta">@Value(<span class="meta-string">"\$&#123;person.name&#125;"</span>)</span><span class="keyword">val</span> name:String, <span class="meta">@Value(<span class="meta-string">"\$&#123;person.sex&#125;"</span>)</span><span class="keyword">val</span> sex:String, <span class="meta">@Value(<span class="meta-string">"\&#123;person.phone&#125;"</span>)</span><span class="keyword">val</span> phone:<span class="built_in">Long</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注,由于@value注解本身对于list map的支持并非很友好 因此并不推荐</span></span><br><span class="line"><span class="comment">//配置list</span></span><br><span class="line">list: <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="comment">//取值注入</span></span><br><span class="line"><span class="meta">@Value(<span class="meta-string">"#&#123;'\$&#123;person.lists&#125;'.split(',')&#125;"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> lists:List&lt;String&gt;</span><br><span class="line"><span class="comment">//或者激活支持转换String为Collection类型的新配置服务</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">conversionService</span><span class="params">()</span></span>: ConversionService&#123;</span><br><span class="line">    <span class="keyword">return</span> DefaultConversionService()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这时list将不用再特殊处理 但配置仍旧只能保持字符串形式</span></span><br><span class="line"><span class="meta">@Value(<span class="meta-string">"\$&#123;person.lists&#125;"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> lists:List&lt;String&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a href="https://github.com/gonghs/kotlin-web" target="_blank" rel="noopener">代码链接</a></h4>]]></content>
      
      
      <categories>
          
          <category> kotlin web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> kotlin </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
